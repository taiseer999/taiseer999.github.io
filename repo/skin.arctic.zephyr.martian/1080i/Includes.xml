<?xml version="1.0" encoding="UTF-8"?>
<!-- Foundation -->
<includes>
    <include file="Defaults.xml"/>
    <include file="Includes_VideoLyrics.xml"/>
    <include file="Includes_Lists.xml"/>
    <include file="Includes_DialogVideoInfo.xml"/>
    <include file="Includes_DialogMusicInfo.xml"/>
    <include file="Includes_DialogAddonInfo.xml"/>
    <include file="Includes_DialogPVRInfo.xml"/>
    <include file="Includes_DialogSelect.xml"/>
    <include file="Includes_SubItems_Home.xml"/>
    <include file="Includes_NowPlaying.xml"/>
    <include file="Includes_Custom_Items.xml"/>
    <include file="Includes_Games.xml"/>
    <include file="Includes_CodecLogos.xml"/>
    <include file="Includes_Weather.xml"/>

    <!-- Views -->
    <include file="View_50_List.xml"/>
    <include file="View_51_BigWide.xml"/>
    <include file="View_52_BigList.xml"/>
    <include file="View_53_Poster.xml"/>
    <include file="View_54_Banner.xml"/>
    <include file="View_55_Wall.xml"/>
    <include file="View_515_SideCards.xml"/>
    <include file="View_56_MediaInfo.xml"/>
    <include file="View_57_ExtraInfo.xml"/>
    <include file="View_58_Cards.xml"/>
    <include file="View_59_BannerWall.xml"/>
    <include file="View_500_Thumbnails.xml"/>
    <include file="View_503_Poster_Square.xml"/>
    <include file="View_505_Wall_Square.xml"/>
    <include file="View_504_Netflix.xml"/>
    <include file="View_507_Fanart.xml"/>
    <include file="View_509_Shift.xml"/>
    <include file="View_513_Shifted.xml"/>
    <include file="View_511_Double.xml"/>
    <include file="View_512_Double_Banner.xml"/>
    <include file="View_506_Slider.xml"/>
    <include file="View_514_Albums.xml"/>
    <include file="View_517_WallSmall.xml"/>
    <include file="View_516_SeasonsInfo.xml"/>
    <include file="View_526_SeasonsInfo_V2.xml"/>
    <include file="View_519_Shift_Modern.xml"/>
    <include file="View_521_Minimal_V2.xml"/>
    <include file="View_523_Minimal_V2_Music.xml"/>
    <include file="View_522_Minimal_V2_Episodes.xml"/>
    <include file="View_524_Minimal_V2_Seasons.xml"/>
    <include file="View_527_List_V2.xml"/>
    <include file="Includes_Furniture.xml"/>
    <include file="Includes_Home.xml"/>
    <include file="Includes_Labels.xml"/>
    <include file="Includes_Images.xml"/>
    <include file="Includes_Animations.xml"/>
    <include file="Includes_Defs.xml"/>
    <include file="Includes_PVR.xml"/>
    <include file="Includes_OSD.xml"/>

    <!-- Skin Shortcuts -->
    <include file="script-skinshortcuts-includes.xml"/>

    <!-- Expressions -->
    <expression name="HomeIsModernMultiWidgets">!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets)</expression>
    <expression name="HomeIsVerticalMultiWidgets">Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)</expression>
    <expression name="HomeIsModernMultiWidgetsNetflix">!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix)</expression>
    <expression name="HomeIsVerticalMultiWidgetsNetflix">Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix)</expression>
    <expression name="HomeIsCleanMinimal">Skin.HasSetting(home.modernwidgets) + Skin.HasSetting(home.vertical.widgets) + Skin.HasSetting(homemenu.netflix) + Skin.HasSetting(homemenu.clean.flix)</expression>
    <expression name="HomeIsVerticalAll">Skin.HasSetting(home.vertical)</expression>
    <expression name="HomeIsClassic">!Skin.HasSetting(home.vertical) + Skin.HasSetting(home.classicwidgets)</expression>
    <expression name="HomeIsVertical">Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.vertical.widgets)</expression>
    <expression name="HomeIsSpotlight">!Skin.HasSetting(home.classicwidgets) + !Skin.HasSetting(home.vertical) + !Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(home.modernwidgets)</expression>
    <expression name="HomeIsModern">Skin.HasSetting(home.modernwidgets) + !Skin.HasSetting(home.vertical.widgets) + !Skin.HasSetting(homemenu.netflix)</expression>
    <expression name="IsYoutube">String.Contains(Container.FolderPath,plugin://plugin.video.youtube)</expression>
    <expression name="Widget1Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable),yes)</expression>
    <expression name="Widget2Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.2),yes)</expression>
    <expression name="Widget3Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.3),yes)</expression>
    <expression name="Widget4Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.4),yes)</expression>
    <expression name="Widget5Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.5),yes)</expression>
    <expression name="Widget6Enabled">String.IsEqual(Container(300).ListItem.Property(widgetEnable.6),yes)</expression>
    <expression name="HomeShowHeader">Skin.HasSetting(home.showheader) + !Skin.HasSetting(home.vertical.widgets)</expression>
    
    <expression name="IsPVRVideo">!Player.HasAudio + VideoPlayer.Content(livetv)</expression>
    <expression name="IsPVRAudio">Player.HasAudio + VideoPlayer.Content(livetv)</expression>
    <expression name="IsAudio">Player.HasAudio + !VideoPlayer.Content(livetv)</expression>
    <expression name="IsVideo">Player.HasVideo + !VideoPlayer.Content(livetv)</expression>
	<expression name="IsPersonInfo">String.IsEqual(ListItem.Property(item.type),person) | String.IsEqual(ListItem.Property(dbtype),person) | String.IsEqual(ListItem.Property(Param.Info),person)</expression>
    <expression name="MusicSeekbarIsVisible">Window.IsVisible(musicosd) + !Skin.HasSetting(musicosd.side) | !Window.IsVisible(musicosd) + [Window.IsVisible(script-cu-lrclyrics-main.xml) | Player.ShowInfo | Player.Seeking | Player.HasPerformedSeek(3) | Player.Paused | Player.Forwarding | Player.Rewinding]</expression>
    <expression name="VideoOSDShort">!String.IsEmpty(Window(home).Property(osdshowinfo)) | !String.IsEmpty(Window(home).Property(osdinfo)) | Player.ShowInfo | [Player.Paused + Skin.HasSetting(osd.showinfoonpause)] | [Window.IsVisible(videoosd) + Window.IsVisible(DialogFullScreenInfo.xml)]</expression>
    <expression name="VideoOSDWide">String.IsEmpty(Window(home).Property(osdshowinfo)) + String.IsEmpty(Window(home).Property(osdinfo)) + !Player.ShowInfo + ![Player.Paused + Skin.HasSetting(osd.showinfoonpause)] + ![Window.IsVisible(videoosd) + Window.IsVisible(DialogFullScreenInfo.xml)]</expression>
    <expression name="TrailerWindowIsActive">Skin.HasSetting(home.netflix.autoplay.trailer) + [[Window.IsVisible(Home.xml) + [$EXP[HomeIsModernMultiWidgetsNetflix] | $EXP[HomeIsCleanMinimal] | $EXP[HomeIsVerticalMultiWidgetsNetflix]]] | Control.IsVisible(521) | Control.IsVisible(522) | Control.IsVisible(510)] + !Window.IsVisible(DialogVideoInfo.xml) + String.IsEqual(Window(home).Property(TrailerPath2),Player.FileNameAndPath) + !String.IsEmpty(Player.FileNameAndPath)</expression>
    <expression name="TrailerIsReady">Skin.HasSetting(home.netflix.autoplay.trailer) + [Window.IsVisible(Home.xml) | Window.IsVisible(MyVideoNav.xml) | $EXP[InGameMode]] + !Control.HasFocus(300) + !Player.HasMedia + !String.IsEmpty(Window(home).Property(listitem.trailer)) + !System.HasVisibleModalDialog + !Window.IsVisible(script-globalsearch.xml) + !String.IsEqual(Window(home).Property(TrailerPath),Window(home).Property(listitem.trailer)) + !System.IdleTime(30)</expression>
    <expression name="TrailerWaitingForPlayer">!String.IsEmpty(Window(home).Property(TrailerPath2)) + !String.IsEmpty(Window(home).Property(TrailerPath)) + String.IsEmpty(Player.FileNameAndPath)</expression>
    <expression name="TrailerIsPlaying">String.IsEqual(Window(home).Property(TrailerPath2),Player.FileNameAndPath) + !String.IsEmpty(Player.FileNameAndPath)</expression>
    <expression name="AutoTrailerDebugging">Skin.HasSetting(home.netflix.autoplay.trailer) + Skin.HasSetting(DebugInfo.extended) + Skin.HasSetting(DebugInfo.extended)</expression>
    <expression name="ExtendedNowPlayingIsVisible">[Skin.HasSetting(extended.nowplaying) + Window.IsVisible(Home) + [Player.HasMedia | Player.Playing]] + [[!ControlGroup(301).HasFocus() + !Control.HasFocus(8888) + !Control.HasFocus(4567)] | ControlGroup(777).HasFocus()]</expression>
    <expression name="ExtendedNowPlayingHelperAutoShow">!$EXP[TrailerIsReady] + !$EXP[TrailerIsPlaying] + !$EXP[TrailerWaitingForPlayer] + !$EXP[TrailerWindowIsActive] + [System.IdleTime(5) + !String.IsEmpty(Window(home).Property(nowplayingautoshowtimer)) + Skin.HasSetting(extended.nowplaying) + Window.IsVisible(Home) + [Player.HasMedia | Player.Playing] + Skin.HasSetting(home.nowplaying.info.auto.show) + !Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogMusicInfo.xml) + !Window.IsVisible(DialogAddonInfo.xml) + !Window.IsVisible(DialogPVRInfo.xml) + !Window.IsVisible(DialogContextMenu.xml) + !Window.IsVisible(DialogBusy.xml)]</expression>
    <expression name="ExtendedNowPlayingHelperAutoClose">!$EXP[TrailerIsReady] + !$EXP[TrailerIsPlaying] + !$EXP[TrailerWaitingForPlayer] + !$EXP[TrailerWindowIsActive] + [[!String.IsEmpty(Window(home).Property(controlsvisible)) | Control.HasFocus(25) | Control.HasFocus(778)] + Skin.HasSetting(extended.nowplaying) + Window.IsVisible(Home) + !Player.HasMedia + !Player.Playing + !Skin.HasSetting(hide.home.nowplaying.controls)]</expression>
    <expression name="TitleClearlogoAvailable">[!String.IsEmpty(ListItem.Art(clearlogo)) | !String.IsEmpty(ListItem.Art(artist.clearlogo)) | !String.IsEmpty(ListItem.Art(tvshow.clearlogo))]</expression>
    <expression name="UseNewJumpbar">!System.AddonIsEnabled(script.embuary.helper) | Skin.HasSetting(use.new.jumpbar)</expression>
	<expression name="IsDialogVideoInfo">Window.IsVisible(DialogVideoInfo.xml) + String.IsEqual(Window(home).Property(infodialog),video)</expression>
	<expression name="IsDialogPersonInfo">Window.IsVisible(DialogVideoInfo.xml) + String.IsEqual(Window(home).Property(infodialog),person)</expression>

    <expression name="HideViewContent">
        Window.IsVisible(DialogAddonInfo.xml) | Window.IsVisible(DialogPVRInfo.xml) | Window.IsVisible(DialogMusicInfo.xml) | Window.IsVisible(DialogVideoInfo.xml)
        | Control.HasFocus(9601) | !String.IsEmpty(Window(Home).Property(TMDbHelper.HideView))
    </expression>
    
    <expression name="IsAudioCodecATMOS">
        [[String.IsEqual(ListItem.AudioCodec,eac3) + Integer.isGreaterOrEqual(ListItem.AudioChannels,6)] | [String.IsEqual(ListItem.AudioCodec,truehd) + Integer.isGreaterOrEqual(ListItem.AudioChannels,8)]] + String.Contains(ListItem.FileNameAndPath,atmos) + !String.Contains(ListItem.AudioCodec,atmos)
        | [VideoPlayer.IsFullscreen + [[String.IsEqual(VideoPlayer.AudioCodec,eac3) + Integer.isGreaterOrEqual(VideoPlayer.AudioChannels,6)] | [String.IsEqual(VideoPlayer.AudioCodec,truehd) + Integer.isGreaterOrEqual(VideoPlayer.AudioChannels,8)]] + String.Contains(Player.FileNameAndPath,atmos) + !String.Contains(Player.AudioCodec,atmos)]
    </expression>

    <expression name="IsAudioCodecATMOSHub">
        [[String.IsEqual(Container(9500).ListItem.AudioCodec,eac3) + Integer.isGreaterOrEqual(Container(9500).ListItem.AudioChannels,6)] | [String.IsEqual(Container(9500).ListItem.AudioCodec,truehd) + Integer.isGreaterOrEqual(Container(9500).ListItem.AudioChannels,8)]] + String.Contains(Container(9500).ListItem.FileNameAndPath,atmos) + !String.Contains(Container(9500).ListItem.AudioCodec,atmos)
    </expression>

    <expression name="IsAudioCodecDTSX">
        [String.Contains(ListItem.AudioCodec,dtshd) | String.isEqual(ListItem.AudioCodec,dtsma)] + Integer.isGreaterOrEqual(ListItem.AudioChannels,8) + [String.Contains(ListItem.FileNameAndPath,dts-x) | String.Contains(ListItem.FileNameAndPath,dtsx)] + !String.Contains(ListItem.AudioCodec,_x)
        | [VideoPlayer.IsFullscreen + [String.Contains(VideoPlayer.AudioCodec,dtshd) | String.isEqual(VideoPlayer.AudioCodec,dtsma)] + Integer.isGreaterOrEqual(VideoPlayer.AudioChannels,8) + [String.Contains(Player.FileNameAndPath,dts-x) | String.Contains(Player.FileNameAndPath,dtsx)]] + !String.Contains(Player.AudioCodec,_x)
    </expression>

    <expression name="IsAudioCodecDTSXHub">
        [String.Contains(Container(9500).ListItem.AudioCodec,dtshd) | String.isEqual(Container(9500).ListItem.AudioCodec,dtsma)] + Integer.isGreaterOrEqual(Container(9500).ListItem.AudioChannels,8) + [String.Contains(Container(9500).ListItem.FileNameAndPath,dts-x) | String.Contains(Container(9500).ListItem.FileNameAndPath,dtsx)] + !String.Contains(Container(9500).ListItem.AudioCodec,_x)
    </expression>

    <expression name="IsVideoHDR10Plus">
        String.IsEqual(ListItem.HdrType,hdr10) + String.Contains(ListItem.FileNameAndPath,hdr10plus)
        | [VideoPlayer.IsFullscreen + String.IsEqual(VideoPlayer.HdrType,hdr10) + String.Contains(Player.FileNameAndPath,hdr10plus)]
    </expression>

    <expression name="IsVideoHDR10PlusHub">
        String.IsEqual(Container(9500).ListItem.HdrType,hdr10) + String.Contains(Container(9500).ListItem.FileNameAndPath,hdr10plus)
    </expression>

    <expression name="IsVideo3D">
        ListItem.IsStereoscopic | String.Contains(ListItem.FilenameAndPath,.3D) | String.Contains(ListItem.FilenameAndPath,-3D)
        | String.Contains(ListItem.FilenameAndPath,_3D) | String.Contains(ListItem.FilenameAndPath, 3D)
    </expression>

    <expression name="IsVideo3DHub">
        Container(9500).ListItem.IsStereoscopic | String.Contains(Container(9500).ListItem.FilenameAndPath,.3D) | String.Contains(Container(9500).ListItem.FilenameAndPath,-3D)
        | String.Contains(Container(9500).ListItem.FilenameAndPath,_3D) | String.Contains(Container(9500).ListItem.FilenameAndPath, 3D)
    </expression>

    <expression name="IsVideoSourceUHDBluray">
        [String.IsEqual(ListItem.VideoResolution,4K) | String.IsEmpty(ListItem.VideoResolution) + [String.Contains(ListItem.FileNameAndPath,4K) | String.Contains(ListItem.FileNameAndPath,2160p) | String.Contains(ListItem.FileNameAndPath,uhd)]]
        + [String.Contains(ListItem.FilenameAndPath,bluray) | String.Contains(ListItem.FilenameAndPath,bdrip) | String.Contains(ListItem.FilenameAndPath,blu-ray)]
        + !$EXP[IsVideo3D]
    </expression>
    
    <expression name="IsVideoSourceUHDBlurayHub">
        [String.IsEqual(Container(9500).ListItem.VideoResolution,4K) | String.IsEmpty(Container(9500).ListItem.VideoResolution) + [String.Contains(Container(9500).ListItem.FileNameAndPath,4K) | String.Contains(Container(9500).ListItem.FileNameAndPath,2160p) | String.Contains(Container(9500).ListItem.FileNameAndPath,uhd)]]
        + [String.Contains(Container(9500).ListItem.FilenameAndPath,bluray) | String.Contains(Container(9500).ListItem.FilenameAndPath,bdrip) | String.Contains(Container(9500).ListItem.FilenameAndPath,blu-ray)]
        + !$EXP[IsVideo3DHub]
    </expression>

    <expression name="IsVideoSourceBluray">
        [String.Contains(ListItem.FilenameAndPath,bluray) | String.Contains(ListItem.FilenameAndPath,bdrip) | String.Contains(ListItem.FilenameAndPath,bd25) | String.Contains(ListItem.FilenameAndPath,bd50) | String.Contains(ListItem.FilenameAndPath,blu-ray)]
        + !$EXP[IsVideo3D] + !$EXP[IsVideoSourceUHDBluray]
    </expression>
    
    <expression name="IsVideoSourceBlurayHub">
        [String.Contains(Container(9500).ListItem.FilenameAndPath,bluray) | String.Contains(Container(9500).ListItem.FilenameAndPath,bdrip) | String.Contains(Container(9500).ListItem.FilenameAndPath,bd25) | String.Contains(Container(9500).ListItem.FilenameAndPath,bd50) | String.Contains(Container(9500).ListItem.FilenameAndPath,blu-ray)]
        + !$EXP[IsVideo3DHub] + !$EXP[IsVideoSourceUHDBlurayHub]
    </expression>

    <expression name="IsVideoSourceWeb">
        String.Contains(ListItem.Filenameandpath,.web.) | String.Contains(ListItem.Filenameandpath,web-dl) | String.Contains(ListItem.Filenameandpath,webdl) | String.Contains(ListItem.Filenameandpath,webrip)
    </expression>

    <expression name="IsVideoSourceWebHub">
        String.Contains(Container(9500).ListItem.Filenameandpath,.web.) | String.Contains(Container(9500).ListItem.Filenameandpath,web-dl) | String.Contains(Container(9500).ListItem.Filenameandpath,webdl) | String.Contains(Container(9500).ListItem.Filenameandpath,webrip)
    </expression>

    <expression name="IsVideoSourceSDTV">
        String.Contains(ListItem.Filenameandpath,pdtv) | String.Contains(ListItem.Filenameandpath,sdtv) | String.Contains(ListItem.Filenameandpath,sd-tv)
    </expression>

    <expression name="IsVideoSourceSDTVHub">
        String.Contains(Container(9500).ListItem.Filenameandpath,pdtv) | String.Contains(Container(9500).ListItem.Filenameandpath,sdtv) | String.Contains(Container(9500).ListItem.Filenameandpath,sd-tv)
    </expression>

    <expression name="IsVideoSourceHDTV">
        String.Contains(ListItem.Filenameandpath,hdtv) | String.Contains(ListItem.Filenameandpath,hd-tv) | String.Contains(ListItem.Filenameandpath,dsr)
    </expression>

    <expression name="IsVideoSourceHDTVHub">
        String.Contains(Container(9500).ListItem.Filenameandpath,hdtv) | String.Contains(Container(9500).ListItem.Filenameandpath,hd-tv) | String.Contains(Container(9500).ListItem.Filenameandpath,dsr)
    </expression>

    <expression name="IsVideoSourceHDDVD">
        String.Contains(ListItem.FilenameAndPath,hddvd)        
    </expression>
    
    <expression name="IsVideoSourceHDDVDHub">
        String.Contains(Container(9500).ListItem.FilenameAndPath,hddvd)        
    </expression>
       
    <expression name="IsVideoSourceDVD">
        String.Contains(ListItem.FilenameAndPath,dvd) + !$EXP[IsVideoSourceHDDVD]     
    </expression>
    
    <expression name="IsVideoSourceDVDHub">
        String.Contains(Container(9500).ListItem.FilenameAndPath,dvd) + !$EXP[IsVideoSourceHDDVDHub]    
    </expression>

    <expression name="HasNextAired">
        [[Container.Content(tvshows) | Container.Content(seasons)] + !String.IsEqual(ListItem.DBTYPE,movie) | String.IsEqual(ListItem.DBTYPE,tvshow) | String.IsEqual(ListItem.DBTYPE,season)]
        + [
           !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Next_Aired)) | !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Last_Aired))
           | !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Status)) | !String.IsEmpty(ListItem.Status)
          ]
    </expression>
    
    <expression name="IsTVShowInProgress">
        [[Container.Content(tvshows) | Container.Content(season)] + !String.IsEqual(ListItem.DBTYPE,movie) | String.IsEqual(ListItem.DBTYPE,tvshow) | String.IsEqual(ListItem.DBTYPE,season)]
        + !String.IsEqual(ListItem.Overlay,OverlayWatched.png) 
        + [
        	[!String.IsEqual(ListItem.Property(WatchedEpisodes),ListItem.Property(TotalEpisodes)) + !String.IsEqual(ListItem.Property(WatchedEpisodes),0) + !String.IsEmpty(ListItem.Property(WatchedEpisodes))] 
        	| !String.IsEmpty(ListItem.Property(WatchedEpisodePercent)) + !Integer.IsEqual(ListItem.Property(WatchedEpisodePercent),0) + !Integer.IsEqual(ListItem.Property(WatchedEpisodePercent),100)
        	| Integer.IsGreater(Window(home).Property(TMDbHelper.ListItem.TotalEpisodes),Window(home).Property(TMDbHelper.ListItem.UnwatchedEpisodes))
          ]
    </expression>
    
    <expression name="IsTVShowInProgress301">
        [[Container(301).Content(tvshows) | Container(301).Content(season)] + !String.IsEqual(Container(301).ListItem.DBTYPE,movie) | String.IsEqual(Container(301).ListItem.DBTYPE,tvshow) | String.IsEqual(Container(301).ListItem.DBTYPE,season)]
        + !String.IsEqual(Container(301).ListItem.Overlay,OverlayWatched.png)
        + [
        	[!String.IsEqual(Container(301).ListItem.Property(WatchedEpisodes),Container(301).ListItem.Property(TotalEpisodes)) + !String.IsEqual(Container(301).ListItem.Property(WatchedEpisodes),0) + !String.IsEmpty(Container(301).ListItem.Property(WatchedEpisodes))] 
            | !String.IsEmpty(Container(301).ListItem.Property(WatchedEpisodePercent)) + !Integer.IsEqual(Container(301).ListItem.Property(WatchedEpisodePercent),0) + !Integer.IsEqual(Container(301).ListItem.Property(WatchedEpisodePercent),100)
        	| Integer.IsGreater(Window(home).Property(TMDbHelper.ListItem.TotalEpisodes),Window(home).Property(TMDbHelper.ListItem.UnwatchedEpisodes))
          ]
    </expression>
    
    <expression name="IsNewMovie">
        [Container.Content(movies) | String.IsEqual(ListItem.DBTYPE,movie)]
        + [
            String.IsEqual(Window(Home).Property(LatestMovie.1.Title),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.3.Title),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.5.Title),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.7.Title),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.9.Title),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),ListItem.Title)
          ]
    </expression>
    <expression name="IsNewTVShow">
        [Container.Content(tvshows) | String.IsEqual(ListItem.DBTYPE,tvshow)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle)
          ]
    </expression>
    <expression name="IsNewSeason">
        [Container.Content(seasons) | String.IsEqual(ListItem.DBTYPE,season)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeSeason),ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeSeason),ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeSeason),ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeSeason),ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeSeason),ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeSeason),ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeSeason),ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeSeason),ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeSeason),ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeSeason),ListItem.Season)
          ]
    </expression>
    <expression name="IsNewEpisode">
        [Container.Content(episodes) | String.IsEqual(ListItem.DBTYPE,episode)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeSeason),ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),ListItem.Title)
          ]
    </expression>
    
    <expression name="IsNewMovie301">
        [Container(301).Content(movies) | String.IsEqual(ListItem.DBTYPE,movie)]
        + [
            String.IsEqual(Window(Home).Property(LatestMovie.1.Title),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.3.Title),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.5.Title),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.7.Title),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.9.Title),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),Container(301).ListItem.Title)
          ]
    </expression>
    <expression name="IsNewTVShow301">
        [Container(301).Content(tvshows) | String.IsEqual(Container(301).ListItem.DBTYPE,tvshow)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),Container(301).ListItem.TvShowTitle)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),Container(301).ListItem.TvShowTitle)
          ]
    </expression>
    <expression name="IsNewSeason301">
        [Container(301).Content(seasons) | String.IsEqual(ListItem.DBTYPE,season)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeSeason),Container(301).ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeSeason),Container(301).ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeSeason),Container(301).ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeSeason),Container(301).ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeSeason),Container(301).ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeSeason),Container(301).ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeSeason),Container(301).ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeSeason),Container(301).ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeSeason),Container(301).ListItem.Season)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeSeason),Container(301).ListItem.Season)
          ]
    </expression>
    <expression name="IsNewEpisode301">
        [Container().Content(episodes) | String.IsEqual(Container(301).ListItem.DBTYPE,episode)]
        + [
            String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),Container(301).ListItem.Title)
            | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),Container(301).ListItem.TvShowTitle) + String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeSeason),Container(301).ListItem.Season) + String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),Container(301).ListItem.Title)
          ]
    </expression>

    <expression name="IsInProgress">
        ListItem.IsResumable | $EXP[IsTVShowInProgress]
    </expression>
    
    <expression name="IsWatched">
        String.IsEqual(ListItem.Overlay,OverlayWatched.png)
        | String.IsEmpty(ListItem.Overlay) + !String.IsEmpty(ListItem.DBID) + Integer.IsGreater(ListItem.PlayCount,0)
        + !ListItem.IsPlaying + !$EXP[IsInProgress]
        + [ String.IsEqual(ListItem.DBType,movie)
          | String.IsEqual(ListItem.DBType,tvshow)
          | String.IsEqual(ListItem.DBType,season)
          | String.IsEqual(ListItem.DBType,episode)
          | String.IsEqual(ListItem.DBType,set)
          | String.IsEqual(ListItem.DBType,video) ]
    </expression>

    <expression name="IsUnwatched">
        String.IsEqual(ListItem.Overlay,OverlayUnwatched.png)
        | String.IsEmpty(ListItem.Overlay) + !String.IsEmpty(ListItem.DBID) + Integer.IsEqual(ListItem.PlayCount,0)
        + !ListItem.IsPlaying + !$EXP[IsInProgress]
        + [ String.IsEqual(ListItem.DBType,movie)
          | String.IsEqual(ListItem.DBType,tvshow)
          | String.IsEqual(ListItem.DBType,season)
          | String.IsEqual(ListItem.DBType,episode)
          | String.IsEqual(ListItem.DBType,set)
          | String.IsEqual(ListItem.DBType,video) ]
    </expression>

    <expression name="IsNewContent">
        $EXP[IsUnwatched] + [$EXP[IsNewMovie] | $EXP[IsNewTVShow] | $EXP[IsNewSeason] | $EXP[IsNewEpisode]]
    </expression>
    
    <expression name="IsInProgress301">
        Container(301).ListItem.IsResumable | $EXP[IsTVShowInProgress301]
    </expression>

    <expression name="IsWatched301">
        String.IsEqual(Container(301).ListItem.Overlay,OverlayWatched.png)
        | String.IsEmpty(Container(301).ListItem.Overlay) + !String.IsEmpty(Container(301).ListItem.DBID) + Integer.IsGreater(Container(301).ListItem.PlayCount,0)
        + !Container(301).ListItem.IsPlaying + !$EXP[IsShowInProgress301]
        + [ String.IsEqual(Container(301).ListItem.DBType,movie)
          | String.IsEqual(Container(301).ListItem.DBType,tvshow)
          | String.IsEqual(Container(301).ListItem.DBType,season)
          | String.IsEqual(Container(301).ListItem.DBType,episode)
          | String.IsEqual(Container(301).ListItem.DBType,set)
          | String.IsEqual(Container(301).ListItem.DBType,video) ]
    </expression>

    <expression name="IsUnwatched301">
        String.IsEqual(Container(301).ListItem.Overlay,OverlayUnwatched.png)
        | String.IsEmpty(Container(301).ListItem.Overlay) + !String.IsEmpty(Container(301).ListItem.DBID) + Integer.IsEqual(Container(301).ListItem.PlayCount,0)
        + !Container(301).ListItem.IsPlaying + !$EXP[IsInProgress301]
        + [ String.IsEqual(Container(301).ListItem.DBType,movie)
          | String.IsEqual(Container(301).ListItem.DBType,tvshow)
          | String.IsEqual(Container(301).ListItem.DBType,season)
          | String.IsEqual(Container(301).ListItem.DBType,episode)
          | String.IsEqual(Container(301).ListItem.DBType,set)
          | String.IsEqual(Container(301).ListItem.DBType,video) ]
    </expression>

    <expression name="IsNewContent301">
        $EXP[IsUnwatched301] + [$EXP[IsNewMovie301] | $EXP[IsNewTVShow301] | $EXP[IsNewSeason301] | $EXP[IsNewEpisode301]]
    </expression>

    <expression name="IsVideoAssets">
        Container.Content(videoassets) | Container.Content(videoversions) | Container.Content(videoextras)
    </expression>

    <expression name="IsVideoAssets301">
        Container(301).Content(videoassets) | Container(301).Content(videoversions) | Container(301).Content(videoextras)
    </expression>
    
    <expression name="HasPlayStatusIndicator">
        [$EXP[IsInProgress] + !Skin.HasSetting(hide.markers.inprogress)] | [$EXP[IsWatched] + !Skin.HasSetting(hide.markers.watched)] | [$EXP[IsNewContent] + !Skin.HasSetting(hide.markers.newcontent)]
    </expression>

    <expression name="HasPlayStatusIndicator301">
        [$EXP[IsInProgress301] + !Skin.HasSetting(hide.markers.inprogress)] | [$EXP[IsWatched301] + !Skin.HasSetting(hide.markers.watched)] | [$EXP[IsNewContent301] + !Skin.HasSetting(hide.markers.newcontent)]
    </expression>
    
    <expression name="IsMediaInfoList">$EXP[IsVideoAssets] + !Skin.HasSetting(list.hide.mediainfo) + !Skin.HasSetting(list.show.filename)</expression>
    
    <expression name="InGameMode">
        [ String.Contains(Container.FolderPath,plugin://plugin.program.ael) 
        | String.Contains(Container.FolderPath,plugin://plugin.program.advanced.launcher) 
        | String.Contains(Container.FolderPath,plugin://plugin.program.advanced.emulator.launcher) 
        | String.Contains(Container.FolderPath,plugin://plugin.program.akl) 
        | String.Contains(Container.FolderPath,plugin://plugin.program.advanced.MAME.launcher) 
        | String.Contains(Container.FolderPath,plugin://plugin.program.iagl) 
        | Window.IsActive(games) 
        | Container.Content(games) ]
    </expression>
        
    <expression name="IsColorSchemeDefault">
          [String.IsEmpty(Skin.String(focuscolor.name)) | String.IsEqual(Skin.String(focuscolor.name),ff0091ea)]
        + [String.IsEmpty(Skin.String(gradientcolor.name)) | String.IsEqual(Skin.String(gradientcolor.name),ff00bfa5)]
        + $EXP[IsBackgroundImageDefault] + !Skin.HasSetting(EnableMonochromeHighlight)
    </expression>

    <expression name="IsColorSchemeTropical">
        String.IsEqual(Skin.String(focuscolor.name),fff4511e) + String.IsEqual(Skin.String(gradientcolor.name),ffe91e63)
        + $EXP[IsBackgroundImagePink] + !Skin.HasSetting(EnableMonochromeHighlight)
    </expression>

    <expression name="IsColorSchemeMiami">
        String.IsEqual(Skin.String(focuscolor.name),ffe91e63) + String.IsEqual(Skin.String(gradientcolor.name),ffb635e5)
        + $EXP[IsBackgroundImagePurple] + !Skin.HasSetting(EnableMonochromeHighlight)
    </expression>

    <expression name="IsColorSchemeBlue">
        String.IsEqual(Skin.String(focuscolor.name),ff0091ea)
        + $EXP[IsBackgroundImageSlate] + Skin.HasSetting(EnableMonochromeHighlight)
    </expression>

    <expression name="IsColorSchemePurple">
        String.IsEqual(Skin.String(focuscolor.name),ff5528a8) + String.IsEqual(Skin.String(gradientcolor.name),ff5528a8)
        + $EXP[IsBackgroundImageCoal] + Skin.HasSetting(EnableMonochromeHighlight)
    </expression>

    <expression name="IsColorSchemeGrey">
        String.IsEqual(Skin.String(focuscolor.name),ff777777)
        + $EXP[IsBackgroundImageSlate] + Skin.HasSetting(EnableMonochromeHighlight)
    </expression>
      
    <expression name="IsColorSchemeCustom">
        !$EXP[IsColorSchemeDefault] + !$EXP[IsColorSchemeTropical] + !$EXP[IsColorSchemeMiami] + !$EXP[IsColorSchemeBlue] + !$EXP[IsColorSchemePurple] + !$EXP[IsColorSchemeGrey]
    </expression>   

    <variable name="ColorSchemeDefaultSelected"><value condition="$EXP[IsColorSchemeDefault]">selected</value></variable> 
    <variable name="ColorSchemeTropicalSelected"><value condition="$EXP[IsColorSchemeTropical]">selected</value></variable> 
    <variable name="ColorSchemeMiamiSelected"><value condition="$EXP[IsColorSchemeMiami]">selected</value></variable> 
    <variable name="ColorSchemeBlueSelected"><value condition="$EXP[IsColorSchemeBlue]">selected</value></variable> 
    <variable name="ColorSchemePurpleSelected"><value condition="$EXP[IsColorSchemePurple]">selected</value></variable> 
    <variable name="ColorSchemeGreySelected"><value condition="$EXP[IsColorSchemeGrey]">selected</value></variable> 
    
    <expression name="IsBackgroundImageDefault">String.IsEmpty(Skin.String(fanart.fallback)) + [String.IsEmpty(Skin.String(Background.Image)) | String.IsEqual(Skin.String(Background.Image),special://skin/extras/backgrounds/blur/classic_blur.jpg)]</expression>
    <expression name="IsBackgroundImagePurple">String.IsEmpty(Skin.String(fanart.fallback)) + String.IsEqual(Skin.String(Background.Image),special://skin/extras/backgrounds/blur/purple_blur.jpg)</expression>
    <expression name="IsBackgroundImageBlue">String.IsEmpty(Skin.String(fanart.fallback)) + String.IsEqual(Skin.String(Background.Image),special://skin/extras/backgrounds/blur/blue_blur.jpg)</expression>
    <expression name="IsBackgroundImageGreen">String.IsEmpty(Skin.String(fanart.fallback)) + String.IsEqual(Skin.String(Background.Image),special://skin/extras/backgrounds/blur/green_blur.jpg)</expression>
    <expression name="IsBackgroundImagePink">String.IsEmpty(Skin.String(fanart.fallback)) + String.IsEqual(Skin.String(Background.Image),special://skin/extras/backgrounds/blur/pink_blur.jpg)</expression>
    <expression name="IsBackgroundImageOrange">String.IsEmpty(Skin.String(fanart.fallback)) + String.IsEqual(Skin.String(Background.Image),special://skin/extras/backgrounds/blur/orange_blur.jpg)</expression>
    <expression name="IsBackgroundImageSlate">String.IsEmpty(Skin.String(fanart.fallback)) + String.IsEqual(Skin.String(Background.Image),special://skin/extras/backgrounds/blur/slate_blur.jpg)</expression>
    <expression name="IsBackgroundImageCoal">String.IsEmpty(Skin.String(fanart.fallback)) + String.IsEqual(Skin.String(Background.Image),special://skin/extras/backgrounds/blur/coal_blur.jpg)</expression>
    <expression name="IsBackgroundImageCustom">!String.IsEmpty(Skin.String(fanart.fallback))</expression>
   
    <variable name="BackgroundImageDefaultSelected"><value condition="$EXP[IsBackgroundImageDefault]">selected</value></variable> 
    <variable name="BackgroundImagePurpleSelected"><value condition="$EXP[IsBackgroundImagePurple]">selected</value></variable> 
    <variable name="BackgroundImageBlueSelected"><value condition="$EXP[IsBackgroundImageBlue]">selected</value></variable> 
    <variable name="BackgroundImageGreenSelected"><value condition="$EXP[IsBackgroundImageGreen]">selected</value></variable> 
    <variable name="BackgroundImagePinkSelected"><value condition="$EXP[IsBackgroundImagePink]">selected</value></variable> 
    <variable name="BackgroundImageOrangeSelected"><value condition="$EXP[IsBackgroundImageOrange]">selected</value></variable> 
    <variable name="BackgroundImageSlateSelected"><value condition="$EXP[IsBackgroundImageSlate]">selected</value></variable> 
    <variable name="BackgroundImageCoalSelected"><value condition="$EXP[IsBackgroundImageCoal]">selected</value></variable> 
    <variable name="BackgroundImageCustomSelected"><value condition="$EXP[IsBackgroundImageCustom]">selected</value></variable> 
    
    <expression name="IMDBNumberIsIMDbId">
       [!String.IsEmpty(ListItem.IMDBNumber) + String.StartsWith(ListItem.IMDBNumber,tt)] | 
       [VideoPlayer.IsFullscreen + !String.IsEmpty(VideoPlayer.IMDBNumber) + String.StartsWith(VideoPlayer.IMDBNumber,tt)]
    </expression>

	<expression name="IsUpdatingMultiWidgets">
		[ Control.IsVisible(30111) + Container(30111).IsUpdating + Integer.IsEqual(Container(30111).NumItems,0) | Control.IsVisible(30121) + Container(30121).IsUpdating + Integer.IsEqual(Container(30121).NumItems,0) | Control.IsVisible(30131) + Container(30131).IsUpdating + Integer.IsEqual(Container(30131).NumItems,0) | Control.IsVisible(30141) + Container(30141).IsUpdating + Integer.IsEqual(Container(30141).NumItems,0) 
		| Control.IsVisible(30151) + Container(30151).IsUpdating + Integer.IsEqual(Container(30151).NumItems,0) | Control.IsVisible(30161) + Container(30161).IsUpdating + Integer.IsEqual(Container(30161).NumItems,0) | Control.IsVisible(30171) + Container(30171).IsUpdating + Integer.IsEqual(Container(30171).NumItems,0) | Control.IsVisible(30181) + Container(30181).IsUpdating + Integer.IsEqual(Container(30181).NumItems,0)
		| Control.IsVisible(30191) + Container(30191).IsUpdating + Integer.IsEqual(Container(30191).NumItems,0) | Control.IsVisible(301101) + Container(301101).IsUpdating + Integer.IsEqual(Container(301101).NumItems,0) | Control.IsVisible(301111) + Container(301111).IsUpdating | Control.IsVisible(301121) + Container(301121).IsUpdating + Integer.IsEqual(Container(301121).NumItems,0) | Control.IsVisible(301131) + Container(301131).IsUpdating + Integer.IsEqual(Container(301131).NumItems,0)
		| Control.IsVisible(301141) + Container(301141).IsUpdating + Integer.IsEqual(Container(301141).NumItems,0) | Control.IsVisible(301151) + Container(301151).IsUpdating + Integer.IsEqual(Container(301151).NumItems,0) | Control.IsVisible(301161) + Container(301161).IsUpdating + Integer.IsEqual(Container(301161).NumItems,0)]
	</expression>

    <expression name="Visualisation_ShowFanart">!Skin.HasSetting(musicosd.hidefanart)</expression>
    <expression name="Visualisation_ShowSlideshow">!Skin.HasSetting(musicosd.hidefanart) + System.AddonIsEnabled(script.artistslideshow) + !Skin.HasSetting(ArtistSlideShow.Disabled)</expression>
    <expression name="Visualisation_AnimateFanart">!Skin.HasSetting(musicosd.hidefanart) + Skin.HasSetting(ArtistSlideshow.Animate)</expression>
	
	<variable name="MediaFlagsPath">
		<value condition="Skin.HasSetting(furniture.coloredicons)">flags/color</value>
		<value>flags/monochrome</value>
	</variable>
    
    <expression name="SortLetterIsNumber">[String.IsEqual(ListItem.SortLetter,$NUMBER[0]) | String.IsEqual(ListItem.SortLetter,$NUMBER[1]) | String.IsEqual(ListItem.SortLetter,$NUMBER[2]) | String.IsEqual(ListItem.SortLetter,$NUMBER[3]) | String.IsEqual(ListItem.SortLetter,$NUMBER[4]) | String.IsEqual(ListItem.SortLetter,$NUMBER[5]) | String.IsEqual(ListItem.SortLetter,$NUMBER[6]) | String.IsEqual(ListItem.SortLetter,$NUMBER[7]) | String.IsEqual(ListItem.SortLetter,$NUMBER[8]) | String.IsEqual(ListItem.SortLetter,$NUMBER[9])]</expression>

    <include name="ScrolltimeDetailsList">
        <scrolltime tween="quadratic">300</scrolltime>
    </include>

    <include name="ScrolltimeWidgetsList">
        <scrolltime tween="quadratic">300</scrolltime>
    </include>  

    <include name="ScrolltimeWidgetsContainer">
        <scrolltime tween="sine" easing="inout">350</scrolltime>
    </include>

    <include name="ScrolltimeViewsList">
        <scrolltime tween="quadratic">350</scrolltime>
    </include>

	<include name="WidgetsAutoscroll">
        <autoscroll delay="10000" time="4000" repeat="10000">!Skin.HasSetting(textbox.disableautoscroll) + [!Skin.HasSetting(home.dontautoshowwidget) | Control.HasFocus(301)]</autoscroll>
	</include>
    
    <include name="FontTop">
        <font>MediumBold</font>
    </include>

    <include name="HiddenButton">
        <posx>-20</posx>
        <posy>-20</posy>
        <width>1</width>
        <height>1</height>
        <label />
        <texturenofocus/>
        <texturefocus/>
    </include>

    <include name="HiddenListControl">
        <top>-3000</top>
        <left>-3000</left>
        <width>1</width>
        <height>1</height>
        <itemlayout/>
        <focusedlayout/>
    </include>

    <include name="Dimensions_Fullscreen">
        <posx>0</posx>
        <posy>0</posy>
        <width>1920</width>
        <height>1080</height>
    </include>

    <include name="GlobalOverlay">
        <control type="image">
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <include>Dimensions_Fullscreen</include>
            <texture border="2">common/black-back.png</texture>
        </control>
    </include>

    <variable name="RatingFlagVarInfo">
        <value condition="String.Contains(ListItem.mpaa,US:G) | String.Contains(ListItem.mpaa,USA:G) | String.Contains(ListItem.mpaa,Rated G)">mpaa_g_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,PG-13)">mpaa_pg-13_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,Rated PG) | String.IsEqual(ListItem.Mpaa,PG)">mpaa_pg_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,Rated NR) | String.IsEqual(ListItem.mpaa,Not Rated)">mpaa_nr_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:R) | String.Contains(ListItem.mpaa,USA:R) | String.Contains(ListItem.mpaa,Rated R) | String.IsEqual(ListItem.mpaa,R)">mpaa_r_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:NC-17)| String.Contains(ListItem.mpaa,USA:NC-17)| String.Contains(ListItem.mpaa,Rated NC-17)">mpaa_nc-17_certificate_us.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:U) | String.Contains(ListItem.mpaa,United Kingdom:U)">bbfc_u_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:PG) | String.Contains(ListItem.mpaa,United Kingdom:PG)">bbfc_pg_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12A) | String.Contains(ListItem.mpaa,United Kingdom:12A)">bbfc_12a_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12) | String.Contains(ListItem.mpaa,United Kingdom:12)">bbfc_12_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:15) | String.Contains(ListItem.mpaa,United Kingdom:15)">bbfc_15_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:18) | String.Contains(ListItem.mpaa,United Kingdom:18)">bbfc_18_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-Y) | String.Contains(ListItem.MPAA,United States:TV-Y) | String.Contains(ListItem.MPAA,USA:TV-Y) | String.IsEqual(ListItem.MPAA,Rated TV-Y) | String.IsEqual(ListItem.MPAA,TV-Y)">tv-y.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-Y7) | String.Contains(ListItem.MPAA,United States:TV-Y7) | String.Contains(ListItem.MPAA,USA:TV-Y7) | String.IsEqual(ListItem.MPAA,Rated TV-Y7) | String.IsEqual(ListItem.MPAA,TV-Y7)">tv-y7.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-G) | String.Contains(ListItem.MPAA,United States:TV-G) | String.Contains(ListItem.MPAA,USA:TV-G) | String.IsEqual(ListItem.MPAA,Rated TV-G) | String.IsEqual(ListItem.MPAA,TV-G)">tv-g.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-PG) | String.Contains(ListItem.MPAA,United States:TV-PG) | String.Contains(ListItem.MPAA,USA:TV-PG) | String.IsEqual(ListItem.MPAA,Rated TV-PG) | String.IsEqual(ListItem.MPAA,TV-PG)">tv-pg.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-14) | String.Contains(ListItem.MPAA,United States:TV-14) | String.Contains(ListItem.MPAA,USA:TV-14) | String.IsEqual(ListItem.MPAA,Rated TV-14) | String.IsEqual(ListItem.MPAA,TV-14)">tv-14.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-MA) | String.Contains(ListItem.MPAA,United States:TV-MA) | String.Contains(ListItem.MPAA,USA:TV-MA) | String.IsEqual(ListItem.MPAA,Rated TV-MA) | String.IsEqual(ListItem.MPAA,TV-MA)">tv-ma.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:0) | String.Contains(ListItem.mpaa,ab 0) | String.Contains(ListItem.mpaa,FSK0) | String.Contains(ListItem.mpaa,FSK 0) | String.Contains(ListItem.mpaa,de/0) | String.Contains(ListItem.mpaa,Rated 0)">fsk-0.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:16) | String.Contains(ListItem.mpaa,ab 16) | String.Contains(ListItem.mpaa,FSK16) | String.Contains(ListItem.mpaa,FSK 16) | String.Contains(ListItem.mpaa,de/16) | String.Contains(ListItem.mpaa,Rated 16)">fsk-16.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:6)| String.Contains(ListItem.mpaa,ab 6) | String.Contains(ListItem.mpaa,FSK6) | String.Contains(ListItem.mpaa,FSK 6) | String.Contains(ListItem.mpaa,de/6) | String.Contains(ListItem.mpaa,Rated 6)">fsk-6.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:12) | String.Contains(ListItem.mpaa,ab 12) | String.Contains(ListItem.mpaa,FSK12) | String.Contains(ListItem.mpaa,FSK 12) | String.Contains(ListItem.mpaa,de/12) | String.Contains(ListItem.mpaa,Rated 12)">fsk-12.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:18) | String.Contains(ListItem.mpaa,ab 18) | String.Contains(ListItem.mpaa,FSK18) | String.Contains(ListItem.mpaa,FSK 18) | String.Contains(ListItem.mpaa,de/18) | String.Contains(ListItem.mpaa,Rated 18)">fsk-18.png</value>
        <value condition="String.Contains(ListItem.mpaa,besorolás alatt)">hu_ba.png</value>
        <value condition="String.Contains(ListItem.mpaa,korhatárra való tekintett nélkül megtekintetheto)">hu_kn.png</value>
        <value condition="String.Contains(ListItem.mpaa,12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">hu_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,16 éven aluliak számára nem ajánlott)">hu_16.png</value>
        <value condition="String.Contains(ListItem.mpaa,18 éven aluliak számára nem ajánlott)">hu_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:U) | String.Contains(ListItem.mpaa,France:U) | String.Contains(ListItem.mpaa,Tout public) | String.Contains(ListItem.mpaa,Tous public)">csau.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:10) | String.Contains(ListItem.mpaa,France:10) | String.Contains(ListItem.mpaa,France:-10) | String.Contains(ListItem.mpaa,Interdit aux moins de 10 ans) | String.Contains(ListItem.mpaa,des propos ou des images peuvent heurter)">csa10.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:12) | String.Contains(ListItem.mpaa,France:12) | String.Contains(ListItem.mpaa,France:-12) | String.Contains(ListItem.mpaa,Interdit aux moins de 12 ans)">csa12.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:16) | String.Contains(ListItem.mpaa,France:16) | String.Contains(ListItem.mpaa,France:-16) | String.Contains(ListItem.mpaa,Interdit aux moins de 16 ans)">csa16.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:18) | String.Contains(ListItem.mpaa,France:18) | String.Contains(ListItem.mpaa,France:-18) | String.Contains(ListItem.mpaa,Interdit aux moins de 18 ans)">csa18.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:Livre) | String.Contains(ListItem.mpaa,Livre)">mpaa_brazil_livre.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:10) | String.Contains(ListItem.mpaa,10 anos)">mpaa_brazil_10.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:12) | String.Contains(ListItem.mpaa,12 anos)">mpaa_brazil_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:14) | String.Contains(ListItem.mpaa,14 anos)">mpaa_brazil_14.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:16) | String.Contains(ListItem.mpaa,16 anos)">mpaa_brazil_16.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:18) | String.Contains(ListItem.mpaa,18 anos)">mpaa_brazil_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,전체) | String.Contains(ListItem.mpaa,0) | String.Contains(ListItem.mpaa,ALL)">kr_certificate_all.png</value>
        <value condition="String.Contains(ListItem.mpaa,12) | String.Contains(ListItem.mpaa,12세)">kr_certificate_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,15) | String.Contains(ListItem.mpaa,15세)">kr_certificate_15.png</value>
        <value condition="String.Contains(ListItem.mpaa,18세) | String.Contains(ListItem.mpaa,불가)  | String.Contains(ListItem.mpaa,19) | String.Contains(ListItem.mpaa,청불) | String.Contains(ListItem.mpaa,18)">kr_certificate_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,제한)">kr_certificate_r.png</value>
        <value>$INFO[ListItem.MPAA,,.png]</value>
    </variable>

    <variable name="RatingFlagVar">
        <value condition="String.Contains(ListItem.mpaa,US:NC-17)| String.Contains(ListItem.mpaa,USA:NC-17)| String.Contains(ListItem.mpaa,Rated NC-17)">nc-17.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:U) | String.Contains(ListItem.mpaa,United Kingdom:U)">bbfc_u_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:PG) | String.Contains(ListItem.mpaa,United Kingdom:PG)">bbfc_pg_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12A) | String.Contains(ListItem.mpaa,United Kingdom:12A)">bbfc_12a_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:12) | String.Contains(ListItem.mpaa,United Kingdom:12)">bbfc_12_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:15) | String.Contains(ListItem.mpaa,United Kingdom:15)">bbfc_15_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.mpaa,UK:18) | String.Contains(ListItem.mpaa,United Kingdom:18)">bbfc_18_certificate_uk.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-Y) | String.Contains(ListItem.MPAA,United States:TV-Y) | String.Contains(ListItem.MPAA,USA:TV-Y) | String.IsEqual(ListItem.MPAA,Rated TV-Y) | String.IsEqual(ListItem.MPAA,TV-Y)">tv-y.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-Y7) | String.Contains(ListItem.MPAA,United States:TV-Y7) | String.Contains(ListItem.MPAA,USA:TV-Y7) | String.IsEqual(ListItem.MPAA,Rated TV-Y7) | String.IsEqual(ListItem.MPAA,TV-Y7)">tv-y7.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-G) | String.Contains(ListItem.MPAA,United States:TV-G) | String.Contains(ListItem.MPAA,USA:TV-G) | String.IsEqual(ListItem.MPAA,Rated TV-G) | String.IsEqual(ListItem.MPAA,TV-G)">tv-g.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-PG) | String.Contains(ListItem.MPAA,United States:TV-PG) | String.Contains(ListItem.MPAA,USA:TV-PG) | String.IsEqual(ListItem.MPAA,Rated TV-PG) | String.IsEqual(ListItem.MPAA,TV-PG)">tv-pg.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-14) | String.Contains(ListItem.MPAA,United States:TV-14) | String.Contains(ListItem.MPAA,USA:TV-14) | String.IsEqual(ListItem.MPAA,Rated TV-14) | String.IsEqual(ListItem.MPAA,TV-14)">tv-14.png</value>
        <value condition="String.Contains(ListItem.MPAA,US:TV-MA) | String.Contains(ListItem.MPAA,United States:TV-MA) | String.Contains(ListItem.MPAA,USA:TV-MA) | String.IsEqual(ListItem.MPAA,Rated TV-MA) | String.IsEqual(ListItem.MPAA,TV-MA)">tv-ma.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:16) | String.Contains(ListItem.mpaa,ab 16) | String.Contains(ListItem.mpaa,FSK16) | String.Contains(ListItem.mpaa,FSK 16) | String.Contains(ListItem.mpaa,de/16) | String.Contains(ListItem.mpaa,Rated 16)">fsk-16.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:6)| String.Contains(ListItem.mpaa,ab 6) | String.Contains(ListItem.mpaa,FSK6) | String.Contains(ListItem.mpaa,FSK 6) | String.Contains(ListItem.mpaa,de/6) | String.Contains(ListItem.mpaa,Rated 6)">fsk-6.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:12) | String.Contains(ListItem.mpaa,ab 12) | String.Contains(ListItem.mpaa,FSK12) | String.Contains(ListItem.mpaa,FSK 12) | String.Contains(ListItem.mpaa,de/12) | String.Contains(ListItem.mpaa,Rated 12)">fsk-12.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany:18) | String.Contains(ListItem.mpaa,ab 18) | String.Contains(ListItem.mpaa,FSK18) | String.Contains(ListItem.mpaa,FSK 18) | String.Contains(ListItem.mpaa,de/18) | String.Contains(ListItem.mpaa,Rated 18)">fsk-18.png</value>
        <value condition="String.Contains(ListItem.mpaa,Germany)|String.Contains(ListItem.mpaa,FSK)| String.Contains(ListItem.mpaa,o.A)| String.Contains(ListItem.mpaa,de/0) | String.Contains(ListItem.mpaa,Rated 0)">fsk-0.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:G) | String.Contains(ListItem.mpaa,USA:G) | String.Contains(ListItem.mpaa,Rated G)">g.png</value>
        <value condition="String.Contains(ListItem.mpaa,PG-13)">pg-13.png</value>
        <value condition="String.Contains(ListItem.mpaa,Rated PG) | String.IsEqual(ListItem.Mpaa,PG)">pg.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:NC-17) | String.Contains(ListItem.mpaa,USA:NC-17) | String.Contains(ListItem.mpaa,Rated NC-17) | String.IsEqual(ListItem.MPAA,NC-17)">nc-17.png</value>
        <value condition="String.Contains(ListItem.mpaa,Rated NR) | String.IsEqual(ListItem.mpaa,Not Rated)">nr.png</value>
        <value condition="String.Contains(ListItem.mpaa,US:R) | String.Contains(ListItem.mpaa,USA:R) | String.Contains(ListItem.mpaa,Rated R) | String.Contains(ListItem.mpaa,Rated) | String.IsEqual(ListItem.mpaa,R)">r.png</value>
        <value condition="String.Contains(ListItem.mpaa,besorolás alatt)">hu_ba.png</value>
        <value condition="String.Contains(ListItem.mpaa,korhatárra való tekintett nélkül megtekintetheto)">hu_kn.png</value>
        <value condition="String.Contains(ListItem.mpaa,12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">hu_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,16 éven aluliak számára nem ajánlott)">hu_16.png</value>
        <value condition="String.Contains(ListItem.mpaa,18 éven aluliak számára nem ajánlott)">hu_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:U) | String.Contains(ListItem.mpaa,France:U) | String.Contains(ListItem.mpaa,Tout public) | String.Contains(ListItem.mpaa,Tous public) | String.Contains(ListItem.mpaa,partir de 3 ans) | String.Contains(ListItem.mpaa,partir de 6 ans)">csau.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:10) | String.Contains(ListItem.mpaa,France:10) | String.Contains(ListItem.mpaa,France:-10) | String.Contains(ListItem.mpaa,Interdit aux moins de 10 ans) | String.Contains(ListItem.mpaa,des propos ou des images peuvent heurter)">csa10.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:12) | String.Contains(ListItem.mpaa,France:12) | String.Contains(ListItem.mpaa,France:-12) | String.Contains(ListItem.mpaa,Interdit aux moins de 12 ans)">csa12.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:16) | String.Contains(ListItem.mpaa,France:16) | String.Contains(ListItem.mpaa,France:-16) | String.Contains(ListItem.mpaa,Interdit aux moins de 16 ans)">csa16.png</value>
        <value condition="String.Contains(ListItem.mpaa,FR:18) | String.Contains(ListItem.mpaa,France:18) | String.Contains(ListItem.mpaa,France:-18) | String.Contains(ListItem.mpaa,Interdit aux moins de 18 ans)">csa18.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:Livre) | String.Contains(ListItem.mpaa,Livre)">mpaa_brazil_livre.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:10) | String.Contains(ListItem.mpaa,10 anos)">mpaa_brazil_10.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:12) | String.Contains(ListItem.mpaa,12 anos)">mpaa_brazil_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:14) | String.Contains(ListItem.mpaa,14 anos)">mpaa_brazil_14.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:16) | String.Contains(ListItem.mpaa,16 anos)">mpaa_brazil_16.png</value>
        <value condition="String.Contains(ListItem.mpaa,Brazil:18) | String.Contains(ListItem.mpaa,18 anos)">mpaa_brazil_18.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:R) | String.Contains(ListItem.MPAA,Australia R)">australia_R.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:MA) | String.Contains(ListItem.MPAA,Australia MA)">australia_MA.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:M) | String.Contains(ListItem.MPAA,Australia M)">australia_M.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:PG) | String.Contains(ListItem.MPAA,Australia PG)">australia_PG.png</value>
        <value condition="String.Contains(ListItem.MPAA,Australia:G) | String.Contains(ListItem.MPAA,Australia G)">australia_G.png</value>
        <value condition="String.Contains(ListItem.mpaa,전체) | String.Contains(ListItem.mpaa,0) | String.Contains(ListItem.mpaa,ALL)">kr_certificate_all.png</value>
        <value condition="String.Contains(ListItem.mpaa,12) | String.Contains(ListItem.mpaa,12세)">kr_certificate_12.png</value>
        <value condition="String.Contains(ListItem.mpaa,15) | String.Contains(ListItem.mpaa,15세)">kr_certificate_15.png</value>
        <value condition="String.Contains(ListItem.mpaa,18세) | String.Contains(ListItem.mpaa,청불)  | String.Contains(ListItem.mpaa,19) | String.Contains(ListItem.mpaa,불가) | String.Contains(ListItem.mpaa,18)">kr_certificate_18.png</value>
        <value condition="String.Contains(ListItem.mpaa,제한)">kr_certificate_r.png</value>
        <value>$INFO[ListItem.MPAA,,.png]</value>
    </variable>

    <variable name="RatingFlagVarHub">
        <value condition="String.Contains(Container(9500).ListItem.mpaa,US:NC-17)| String.Contains(Container(9500).ListItem.mpaa,USA:NC-17)| String.Contains(Container(9500).ListItem.mpaa,Rated NC-17)">nc-17.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:U) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:U)">bbfc_u_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:PG) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:PG)">bbfc_pg_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:12A) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:12A)">bbfc_12a_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:12) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:12)">bbfc_12_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:15) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:15)">bbfc_15_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,UK:18) | String.Contains(Container(9500).ListItem.mpaa,United Kingdom:18)">bbfc_18_certificate_uk.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-Y) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-Y) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-Y) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-Y) | String.IsEqual(Container(9500).ListItem.MPAA,TV-Y)">tv-y.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-Y7) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-Y7) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-Y7) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-Y7) | String.IsEqual(Container(9500).ListItem.MPAA,TV-Y7)">tv-y7.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-G) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-G) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-G) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-G) | String.IsEqual(Container(9500).ListItem.MPAA,TV-G)">tv-g.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-PG) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-PG) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-PG) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-PG) | String.IsEqual(Container(9500).ListItem.MPAA,TV-PG)">tv-pg.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-14) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-14) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-14) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-14) | String.IsEqual(Container(9500).ListItem.MPAA,TV-14)">tv-14.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,US:TV-MA) | String.Contains(Container(9500).ListItem.MPAA,United States:TV-MA) | String.Contains(Container(9500).ListItem.MPAA,USA:TV-MA) | String.IsEqual(Container(9500).ListItem.MPAA,Rated TV-MA) | String.IsEqual(Container(9500).ListItem.MPAA,TV-MA)">tv-ma.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany:16) | String.Contains(Container(9500).ListItem.mpaa,ab 16) | String.Contains(ListItem.mpaa,FSK16) | String.Contains(Container(9500).ListItem.mpaa,FSK 16) | String.Contains(Container(9500).ListItem.mpaa,de/16) | String.Contains(Container(9500).ListItem.mpaa,Rated 16)">fsk-16.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany:6)| String.Contains(Container(9500).ListItem.mpaa,ab 6) | String.Contains(ListItem.mpaa,FSK6) | String.Contains(Container(9500).ListItem.mpaa,FSK 6) | String.Contains(Container(9500).ListItem.mpaa,de/6) | String.Contains(Container(9500).ListItem.mpaa,Rated 6)">fsk-6.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany:12) | String.Contains(Container(9500).ListItem.mpaa,ab 12) | String.Contains(ListItem.mpaa,FSK12) | String.Contains(Container(9500).ListItem.mpaa,FSK 12) | String.Contains(Container(9500).ListItem.mpaa,de/12) | String.Contains(Container(9500).ListItem.mpaa,Rated 12)">fsk-12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany:18) | String.Contains(Container(9500).ListItem.mpaa,ab 18) | String.Contains(ListItem.mpaa,FSK18) | String.Contains(Container(9500).ListItem.mpaa,FSK 18) | String.Contains(Container(9500).ListItem.mpaa,de/18) | String.Contains(Container(9500).ListItem.mpaa,Rated 18)">fsk-18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Germany)|String.Contains(Container(9500).ListItem.mpaa,FSK)| String.Contains(Container(9500).ListItem.mpaa,o.A)| String.Contains(Container(9500).ListItem.mpaa,de/0)| String.Contains(Container(9500).ListItem.mpaa,Rated 0)">fsk-0.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,US:G) | String.Contains(Container(9500).ListItem.mpaa,USA:G) | String.Contains(Container(9500).ListItem.mpaa,Rated G)">g.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,PG-13)">pg-13.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Rated PG) | String.IsEqual(Container(9500).ListItem.Mpaa,PG)">pg.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,US:NC-17) | String.Contains(Container(9500).ListItem.mpaa,USA:NC-17) | String.Contains(Container(9500).ListItem.mpaa,Rated NC-17) | String.IsEqual(Container(9500).ListItem.MPAA,NC-17)">nc-17.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Rated NR) | String.IsEqual(Container(9500).ListItem.mpaa,Not Rated)">nr.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,US:R) | String.Contains(Container(9500).ListItem.mpaa,USA:R) | String.Contains(Container(9500).ListItem.mpaa,Rated R) | String.Contains(Container(9500).ListItem.mpaa,Rated) | String.IsEqual(ListItem.mpaa,R)">r.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,besorolás alatt)">hu_ba.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,korhatárra való tekintett nélkül megtekintetheto)">hu_kn.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,12 éven aluliak számára a megtekintése nagykorú felügyelete mellett ajánlott)">hu_12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,16 éven aluliak számára nem ajánlott)">hu_16.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,18 éven aluliak számára nem ajánlott)">hu_18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:U) | String.Contains(Container(9500).ListItem.mpaa,France:U) | String.Contains(ListItem.mpaa,Tout public) | String.Contains(ListItem.mpaa,Tous public) | String.Contains(Container(9500).ListItem.mpaa,partir de 3 ans) | String.Contains(Container(9500).ListItem.mpaa,partir de 6 ans)">csau.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:10) | String.Contains(Container(9500).ListItem.mpaa,France:10) | String.Contains(Container(9500).ListItem.mpaa,France:-10) | String.Contains(Container(9500).ListItem.mpaa,Interdit aux moins de 10 ans) | String.Contains(Container(9500).ListItem.mpaa,des propos ou des images peuvent heurter)">csa10.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:12) | String.Contains(Container(9500).ListItem.mpaa,France:12) | String.Contains(Container(9500).ListItem.mpaa,France:-12) | String.Contains(Container(9500).ListItem.mpaa,Interdit aux moins de 12 ans)">csa12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:16) | String.Contains(Container(9500).ListItem.mpaa,France:16) | String.Contains(Container(9500).ListItem.mpaa,France:-16) | String.Contains(Container(9500).ListItem.mpaa,Interdit aux moins de 16 ans)">csa16.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,FR:18) | String.Contains(Container(9500).ListItem.mpaa,France:18) | String.Contains(Container(9500).ListItem.mpaa,France:-18) | String.Contains(Container(9500).ListItem.mpaa,Interdit aux moins de 18 ans)">csa18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:Livre) | String.Contains(Container(9500).ListItem.mpaa,Livre)">mpaa_brazil_livre.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:10) | String.Contains(Container(9500).ListItem.mpaa,10 anos)">mpaa_brazil_10.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:12) | String.Contains(Container(9500).ListItem.mpaa,12 anos)">mpaa_brazil_12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:14) | String.Contains(Container(9500).ListItem.mpaa,14 anos)">mpaa_brazil_14.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:16) | String.Contains(Container(9500).ListItem.mpaa,16 anos)">mpaa_brazil_16.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,Brazil:18) | String.Contains(Container(9500).ListItem.mpaa,18 anos)">mpaa_brazil_18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:R) | String.Contains(Container(9500).ListItem.MPAA,Australia R)">australia_R.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:MA) | String.Contains(Container(9500).ListItem.MPAA,Australia MA)">australia_MA.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:M) | String.Contains(Container(9500).ListItem.MPAA,Australia M)">australia_M.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:PG) | String.Contains(Container(9500).ListItem.MPAA,Australia PG)">australia_PG.png</value>
        <value condition="String.Contains(Container(9500).ListItem.MPAA,Australia:G) | String.Contains(Container(9500).ListItem.MPAA,Australia G)">australia_G.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,전체) | String.Contains(Container(9500).ListItem.mpaa,0) | String.Contains(Container(9500).ListItem.mpaa,ALL)">kr_certificate_all.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,12) |String.Contains(Container(9500).ListItem.mpaa,12세)">kr_certificate_12.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,15) | String.Contains(Container(9500).ListItem.mpaa,15세)">kr_certificate_15.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,18세) | String.Contains(Container(9500).ListItem.mpaa,청불)  | String.Contains(Container(9500).ListItem.mpaa,19) | String.Contains(Container(9500).ListItem.mpaa,불가) | String.Contains(Container(9500).ListItem.mpaa,18)">kr_certificate_18.png</value>
        <value condition="String.Contains(Container(9500).ListItem.mpaa,제한)">kr_certificate_r.png</value>
        <value>$INFO[ListItem.MPAA,,.png]</value>
    </variable>

    <variable name="StartupFanart">
        <value condition="!String.IsEmpty(Skin.String(startupfanart.fallback))">$INFO[Skin.String(startupfanart.fallback)]</value>
        <value>common/bg.jpg</value>
    </variable>

    <variable name="StartupDiffuse">
        <value condition="String.IsEmpty(Skin.String(startupfanart.fallback))">Background</value>
        <value/>
    </variable>

    <variable name="GlobalFanart_Blur">
        <value>$INFO[Window(Home).Property(TMDbHelper.ListItem.BlurImage)]</value>
    </variable>

    <variable name="GlobalFanart_NowPlaying">
        <value condition="$EXP[Visualisation_ShowSlideshow] + !String.IsEmpty(Window(Visualisation).Property(ArtistSlideshow.Image)) + Player.HasAudio">$INFO[Window(Visualisation).Property(ArtistSlideshow.Image)]</value>
        <value condition="$EXP[Visualisation_ShowFanart] + !String.IsEmpty(Player.Art(fanart)) + Player.HasAudio">$INFO[Player.Art(fanart)]</value>
        <value condition="$EXP[Visualisation_ShowFanart] + !String.IsEmpty(Skin.String(fanart.fallback.music)) + Player.HasAudio">$INFO[Skin.String(fanart.fallback.music)]</value>
        <value condition="!String.IsEmpty(Player.Art(fanart))">$INFO[Player.Art(fanart)]</value>
        <value condition="Player.HasAudio | VideoPlayer.Content(musicvideos)">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
        <value condition="Player.HasVideo + VideoPlayer.Content(episodes)">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
        <value condition="Player.HasVideo + VideoPlayer.Content(movies)">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
        <value>$VAR[Image_SimpleBackground]</value>
    </variable>

	<variable name="GlobalFanart_MultiWidgets">
        <!-- Now Playing -->
        <value condition="Skin.HasSetting(extended.nowplaying) + !ControlGroup(301).HasFocus() + Player.HasMedia">$VAR[GlobalFanart_NowPlaying]</value>

		<!-- Multi Widget Weather -->
        <value condition="!String.IsEmpty(ListItem.Property(FanartCode)) + $EXP[HasWeatherFanartSingle]">$VAR[WeatherFanartPath]$INFO[ListItem.Property(FanartCode),,.jpg]</value>
        <value condition="!String.IsEmpty(ListItem.Property(FanartCode)) + $EXP[HasWeatherFanartMulti]">$VAR[WeatherFanartPath]$INFO[ListItem.Property(FanartCode)]/</value>
	
		<!-- Multi Widget -->
        <value condition="!String.IsEmpty(ListItem.Art(fanart)) + [!Skin.HasSetting(disable.background.addons.fanart) | [Skin.HasSetting(disable.background.addons.fanart) + !String.Contains(ListItem.Art(fanart),addons) + ![String.Contains(ListItem.Art(fanart),plugin) | String.Contains(ListItem.Art(fanart),script) | String.Contains(ListItem.Art(fanart),service)]]]">$INFO[ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(fanart))">$INFO[ListItem.Property(fanart)]</value>
        <value condition="String.StartsWith(ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        
		<!-- Fallbacks -->
        <value condition="String.IsEqual(ListItem.DBtype,movie) | String.IsEqual(ListItem.DBtype,set)">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
        <value condition="String.IsEqual(ListItem.DBtype,artist) | String.IsEqual(ListItem.DBtype,album) | String.IsEqual(ListItem.DBtype,song) | String.IsEqual(ListItem.DBtype,musicvideo)">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
        <value condition="String.IsEqual(ListItem.DBtype,tvshow) | String.IsEqual(ListItem.DBtype,season) | String.IsEqual(ListItem.DBtype,episode) | String.IsEqual(ListItem.DBtype,video)">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>

        <!--Multi Widget First Widget -->
        <value condition="!String.IsEmpty(Container(30111).ListItem.Art(fanart)) + Control.IsVisible(30111) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30111).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30121).ListItem.Art(fanart)) + Control.IsVisible(30121) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30121).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30131).ListItem.Art(fanart)) + Control.IsVisible(30131) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30131).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30141).ListItem.Art(fanart)) + Control.IsVisible(30141) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30141).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30151).ListItem.Art(fanart)) + Control.IsVisible(30151) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30151).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30161).ListItem.Art(fanart)) + Control.IsVisible(30161) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30161).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30171).ListItem.Art(fanart)) + Control.IsVisible(30171) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30171).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30181).ListItem.Art(fanart)) + Control.IsVisible(30181) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30181).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30191).ListItem.Art(fanart)) + Control.IsVisible(30191) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30191).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301101).ListItem.Art(fanart)) + Control.IsVisible(301101) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301101).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301111).ListItem.Art(fanart)) + Control.IsVisible(301111) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301111).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301121).ListItem.Art(fanart)) + Control.IsVisible(301121) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301121).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301131).ListItem.Art(fanart)) + Control.IsVisible(301131) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301131).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301141).ListItem.Art(fanart)) + Control.IsVisible(301141) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301141).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301151).ListItem.Art(fanart)) + Control.IsVisible(301151) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301151).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301161).ListItem.Art(fanart)) + Control.IsVisible(301161) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301161).ListItem.Art(fanart)]</value>

		<!-- PVR -->
        <value condition="Control.IsVisible(30111) + String.StartsWith(Container(30111).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30121) + String.StartsWith(Container(30121).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30131) + String.StartsWith(Container(30131).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30141) + String.StartsWith(Container(30141).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30151) + String.StartsWith(Container(30151).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30161) + String.StartsWith(Container(30161).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30171) + String.StartsWith(Container(30171).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30181) + String.StartsWith(Container(30181).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30191) + String.StartsWith(Container(30191).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301101) + String.StartsWith(Container(301101).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301111) + String.StartsWith(Container(301111).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301121) + String.StartsWith(Container(301121).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301131) + String.StartsWith(Container(301131).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301141) + String.StartsWith(Container(301141).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301151) + String.StartsWith(Container(301151).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301161) + String.StartsWith(Container(301161).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>

        <!--Multi Widget Second Widget (case First Widget become empty) -->
        <value condition="!String.IsEmpty(Container(30112).ListItem.Art(fanart)) + Integer.IsEqual(Container(30111).NumItems,0) + Control.IsVisible(30112) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30112).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30122).ListItem.Art(fanart)) + Integer.IsEqual(Container(30121).NumItems,0) + Control.IsVisible(30122) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30122).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30132).ListItem.Art(fanart)) + Integer.IsEqual(Container(30131).NumItems,0) + Control.IsVisible(30132) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30132).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30142).ListItem.Art(fanart)) + Integer.IsEqual(Container(30141).NumItems,0) + Control.IsVisible(30142) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30142).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30152).ListItem.Art(fanart)) + Integer.IsEqual(Container(30151).NumItems,0) + Control.IsVisible(30152) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30152).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30162).ListItem.Art(fanart)) + Integer.IsEqual(Container(30161).NumItems,0) + Control.IsVisible(30162) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30162).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30172).ListItem.Art(fanart)) + Integer.IsEqual(Container(30171).NumItems,0) + Control.IsVisible(30172) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30172).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30182).ListItem.Art(fanart)) + Integer.IsEqual(Container(30181).NumItems,0) + Control.IsVisible(30182) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30182).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(30192).ListItem.Art(fanart)) + Integer.IsEqual(Container(30191).NumItems,0) + Control.IsVisible(30192) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(30192).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301102).ListItem.Art(fanart)) + Integer.IsEqual(Container(301101).NumItems,0) + Control.IsVisible(301102) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301102).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301112).ListItem.Art(fanart)) + Integer.IsEqual(Container(301111).NumItems,0) + Control.IsVisible(301112) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301112).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301122).ListItem.Art(fanart)) + Integer.IsEqual(Container(301121).NumItems,0) + Control.IsVisible(301122) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301122).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301132).ListItem.Art(fanart)) + Integer.IsEqual(Container(301131).NumItems,0) + Control.IsVisible(301132) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301132).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301142).ListItem.Art(fanart)) + Integer.IsEqual(Container(301141).NumItems,0) + Control.IsVisible(301142) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301142).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301152).ListItem.Art(fanart)) + Integer.IsEqual(Container(301151).NumItems,0) + Control.IsVisible(301152) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301152).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(301162).ListItem.Art(fanart)) + Integer.IsEqual(Container(301161).NumItems,0) + Control.IsVisible(301162) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Container(301162).ListItem.Art(fanart)]</value>

		<!-- PVR -->
        <value condition="Control.IsVisible(30112) + String.StartsWith(Container(30112).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30122) + String.StartsWith(Container(30122).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30132) + String.StartsWith(Container(30132).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30142) + String.StartsWith(Container(30142).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30152) + String.StartsWith(Container(30152).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30162) + String.StartsWith(Container(30162).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30172) + String.StartsWith(Container(30172).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30182) + String.StartsWith(Container(30182).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(30192) + String.StartsWith(Container(30192).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301102) + String.StartsWith(Container(301102).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301112) + String.StartsWith(Container(301112).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301122) + String.StartsWith(Container(301122).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301132) + String.StartsWith(Container(301132).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301142) + String.StartsWith(Container(301142).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301152) + String.StartsWith(Container(301152).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="Control.IsVisible(301162) + String.StartsWith(Container(301162).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + !Skin.HasSetting(home.dontshowfanart)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
	
		<!-- Fallback First Widget -->
		<!-- Movies -->
		<value condition="Control.IsVisible(30111) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30111).ListItem.DBType,movie) | String.IsEqual(Container(30111).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30121) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30121).ListItem.DBType,movie) | String.IsEqual(Container(30121).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30131) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30131).ListItem.DBType,movie) | String.IsEqual(Container(30131).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30141) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30141).ListItem.DBType,movie) | String.IsEqual(Container(30141).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30151) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30151).ListItem.DBType,movie) | String.IsEqual(Container(30151).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30161) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30161).ListItem.DBType,movie) | String.IsEqual(Container(30161).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30171) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30171).ListItem.DBType,movie) | String.IsEqual(Container(30171).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30181) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30181).ListItem.DBType,movie) | String.IsEqual(Container(30181).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30191) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30191).ListItem.DBType,movie) | String.IsEqual(Container(30191).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301101) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301101).ListItem.DBType,movie) | String.IsEqual(Container(301101).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301111) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301111).ListItem.DBType,movie) | String.IsEqual(Container(301111).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301121) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301121).ListItem.DBType,movie) | String.IsEqual(Container(301121).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301131) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301131).ListItem.DBType,movie) | String.IsEqual(Container(301131).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301141) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301141).ListItem.DBType,movie) | String.IsEqual(Container(301141).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301151) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301151).ListItem.DBType,movie) | String.IsEqual(Container(301151).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301161) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301161).ListItem.DBType,movie) | String.IsEqual(Container(301161).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<!-- Music -->
		<value condition="Control.IsVisible(30111) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30111).ListItem.DBType,artist) | String.IsEqual(Container(30111).ListItem.DBType,album) | String.IsEqual(Container(30111).ListItem.DBType,song) | String.IsEqual(Container(30111).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30121) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30121).ListItem.DBType,artist) | String.IsEqual(Container(30121).ListItem.DBType,album) | String.IsEqual(Container(30121).ListItem.DBType,song) | String.IsEqual(Container(30121).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30131) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30131).ListItem.DBType,artist) | String.IsEqual(Container(30131).ListItem.DBType,album) | String.IsEqual(Container(30131).ListItem.DBType,song) | String.IsEqual(Container(30131).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30141) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30141).ListItem.DBType,artist) | String.IsEqual(Container(30141).ListItem.DBType,album) | String.IsEqual(Container(30141).ListItem.DBType,song) | String.IsEqual(Container(30141).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30151) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30151).ListItem.DBType,artist) | String.IsEqual(Container(30151).ListItem.DBType,album) | String.IsEqual(Container(30151).ListItem.DBType,song) | String.IsEqual(Container(30151).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30161) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30161).ListItem.DBType,artist) | String.IsEqual(Container(30161).ListItem.DBType,album) | String.IsEqual(Container(30161).ListItem.DBType,song) | String.IsEqual(Container(30161).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30171) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30171).ListItem.DBType,artist) | String.IsEqual(Container(30171).ListItem.DBType,album) | String.IsEqual(Container(30171).ListItem.DBType,song) | String.IsEqual(Container(30171).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30181) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30181).ListItem.DBType,artist) | String.IsEqual(Container(30181).ListItem.DBType,album) | String.IsEqual(Container(30181).ListItem.DBType,song) | String.IsEqual(Container(30181).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30191) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30191).ListItem.DBType,artist) | String.IsEqual(Container(30191).ListItem.DBType,album) | String.IsEqual(Container(30191).ListItem.DBType,song) | String.IsEqual(Container(30191).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301101) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301101).ListItem.DBType,artist) | String.IsEqual(Container(301101).ListItem.DBType,album) | String.IsEqual(Container(301101).ListItem.DBType,song) | String.IsEqual(Container(301101).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301111) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301111).ListItem.DBType,artist) | String.IsEqual(Container(301111).ListItem.DBType,album) | String.IsEqual(Container(301111).ListItem.DBType,song) | String.IsEqual(Container(301111).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301121) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301121).ListItem.DBType,artist) | String.IsEqual(Container(301121).ListItem.DBType,album) | String.IsEqual(Container(301121).ListItem.DBType,song) | String.IsEqual(Container(301121).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301131) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301131).ListItem.DBType,artist) | String.IsEqual(Container(301131).ListItem.DBType,album) | String.IsEqual(Container(301131).ListItem.DBType,song) | String.IsEqual(Container(301131).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301141) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301141).ListItem.DBType,artist) | String.IsEqual(Container(301141).ListItem.DBType,album) | String.IsEqual(Container(301141).ListItem.DBType,song) | String.IsEqual(Container(301141).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301151) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301151).ListItem.DBType,artist) | String.IsEqual(Container(301151).ListItem.DBType,album) | String.IsEqual(Container(301151).ListItem.DBType,song) | String.IsEqual(Container(301151).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301161) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301161).ListItem.DBType,artist) | String.IsEqual(Container(301161).ListItem.DBType,album) | String.IsEqual(Container(301161).ListItem.DBType,song) | String.IsEqual(Container(301161).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<!-- TV Shows -->
		<value condition="Control.IsVisible(30111) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30111).ListItem.DBType,tvshow) | String.IsEqual(Container(30111).ListItem.DBType,season) | String.IsEqual(Container(30111).ListItem.DBType,episode) | String.IsEqual(Container(30111).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30121) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30121).ListItem.DBType,tvshow) | String.IsEqual(Container(30121).ListItem.DBType,season) | String.IsEqual(Container(30121).ListItem.DBType,episode) | String.IsEqual(Container(30121).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30131) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30131).ListItem.DBType,tvshow) | String.IsEqual(Container(30131).ListItem.DBType,season) | String.IsEqual(Container(30131).ListItem.DBType,episode) | String.IsEqual(Container(30131).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30141) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30141).ListItem.DBType,tvshow) | String.IsEqual(Container(30141).ListItem.DBType,season) | String.IsEqual(Container(30141).ListItem.DBType,episode) | String.IsEqual(Container(30141).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30151) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30151).ListItem.DBType,tvshow) | String.IsEqual(Container(30151).ListItem.DBType,season) | String.IsEqual(Container(30151).ListItem.DBType,episode) | String.IsEqual(Container(30151).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30161) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30161).ListItem.DBType,tvshow) | String.IsEqual(Container(30161).ListItem.DBType,season) | String.IsEqual(Container(30161).ListItem.DBType,episode) | String.IsEqual(Container(30161).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30171) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30171).ListItem.DBType,tvshow) | String.IsEqual(Container(30171).ListItem.DBType,season) | String.IsEqual(Container(30171).ListItem.DBType,episode) | String.IsEqual(Container(30171).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30181) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30181).ListItem.DBType,tvshow) | String.IsEqual(Container(30181).ListItem.DBType,season) | String.IsEqual(Container(30181).ListItem.DBType,episode) | String.IsEqual(Container(30181).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30191) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30191).ListItem.DBType,tvshow) | String.IsEqual(Container(30191).ListItem.DBType,season) | String.IsEqual(Container(30191).ListItem.DBType,episode) | String.IsEqual(Container(30191).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301101) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301101).ListItem.DBType,tvshow) | String.IsEqual(Container(301101).ListItem.DBType,season) | String.IsEqual(Container(301101).ListItem.DBType,episode) | String.IsEqual(Container(301101).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301111) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301111).ListItem.DBType,tvshow) | String.IsEqual(Container(301111).ListItem.DBType,season) | String.IsEqual(Container(301111).ListItem.DBType,episode) | String.IsEqual(Container(301111).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301121) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301121).ListItem.DBType,tvshow) | String.IsEqual(Container(301121).ListItem.DBType,season) | String.IsEqual(Container(301121).ListItem.DBType,episode) | String.IsEqual(Container(301121).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301131) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301131).ListItem.DBType,tvshow) | String.IsEqual(Container(301131).ListItem.DBType,season) | String.IsEqual(Container(301131).ListItem.DBType,episode) | String.IsEqual(Container(301131).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301141) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301141).ListItem.DBType,tvshow) | String.IsEqual(Container(301141).ListItem.DBType,season) | String.IsEqual(Container(301141).ListItem.DBType,episode) | String.IsEqual(Container(301141).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301151) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301151).ListItem.DBType,tvshow) | String.IsEqual(Container(301151).ListItem.DBType,season) | String.IsEqual(Container(301151).ListItem.DBType,episode) | String.IsEqual(Container(301151).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301161) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301161).ListItem.DBType,tvshow) | String.IsEqual(Container(301161).ListItem.DBType,season) | String.IsEqual(Container(301161).ListItem.DBType,episode) | String.IsEqual(Container(301161).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>

		<!-- Fallback Second Widget -->
		<!-- Movies -->
		<value condition="Control.IsVisible(30112) + Integer.IsEqual(Container(30111).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30112).ListItem.DBType,movie) | String.IsEqual(Container(30112).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30122) + Integer.IsEqual(Container(30121).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30122).ListItem.DBType,movie) | String.IsEqual(Container(30122).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30132) + Integer.IsEqual(Container(30131).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30132).ListItem.DBType,movie) | String.IsEqual(Container(30132).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30142) + Integer.IsEqual(Container(30141).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30142).ListItem.DBType,movie) | String.IsEqual(Container(30142).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30152) + Integer.IsEqual(Container(30151).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30152).ListItem.DBType,movie) | String.IsEqual(Container(30152).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30162) + Integer.IsEqual(Container(30161).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30162).ListItem.DBType,movie) | String.IsEqual(Container(30162).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30172) + Integer.IsEqual(Container(30171).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30172).ListItem.DBType,movie) | String.IsEqual(Container(30172).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30182) + Integer.IsEqual(Container(30181).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30182).ListItem.DBType,movie) | String.IsEqual(Container(30182).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(30192) + Integer.IsEqual(Container(30191).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30192).ListItem.DBType,movie) | String.IsEqual(Container(30192).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301102) + Integer.IsEqual(Container(301101).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301102).ListItem.DBType,movie) | String.IsEqual(Container(301102).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301112) + Integer.IsEqual(Container(301111).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301112).ListItem.DBType,movie) | String.IsEqual(Container(301112).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301122) + Integer.IsEqual(Container(301121).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301122).ListItem.DBType,movie) | String.IsEqual(Container(301122).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301132) + Integer.IsEqual(Container(301131).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301132).ListItem.DBType,movie) | String.IsEqual(Container(301132).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301142) + Integer.IsEqual(Container(301141).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301142).ListItem.DBType,movie) | String.IsEqual(Container(301142).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301152) + Integer.IsEqual(Container(301151).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301152).ListItem.DBType,movie) | String.IsEqual(Container(301152).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<value condition="Control.IsVisible(301162) + Integer.IsEqual(Container(301161).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301162).ListItem.DBType,movie) | String.IsEqual(Container(301162).ListItem.DBType,set)]">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
		<!-- Music -->
		<value condition="Control.IsVisible(30112) + Integer.IsEqual(Container(30111).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30112).ListItem.DBType,artist) | String.IsEqual(Container(30112).ListItem.DBType,album) | String.IsEqual(Container(30112).ListItem.DBType,song) | String.IsEqual(Container(30112).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30122) + Integer.IsEqual(Container(30121).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30122).ListItem.DBType,artist) | String.IsEqual(Container(30122).ListItem.DBType,album) | String.IsEqual(Container(30122).ListItem.DBType,song) | String.IsEqual(Container(30122).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30132) + Integer.IsEqual(Container(30131).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30132).ListItem.DBType,artist) | String.IsEqual(Container(30132).ListItem.DBType,album) | String.IsEqual(Container(30132).ListItem.DBType,song) | String.IsEqual(Container(30132).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30142) + Integer.IsEqual(Container(30141).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30142).ListItem.DBType,artist) | String.IsEqual(Container(30142).ListItem.DBType,album) | String.IsEqual(Container(30142).ListItem.DBType,song) | String.IsEqual(Container(30142).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30152) + Integer.IsEqual(Container(30151).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30152).ListItem.DBType,artist) | String.IsEqual(Container(30152).ListItem.DBType,album) | String.IsEqual(Container(30152).ListItem.DBType,song) | String.IsEqual(Container(30152).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30162) + Integer.IsEqual(Container(30161).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30162).ListItem.DBType,artist) | String.IsEqual(Container(30162).ListItem.DBType,album) | String.IsEqual(Container(30162).ListItem.DBType,song) | String.IsEqual(Container(30162).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30172) + Integer.IsEqual(Container(30171).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30172).ListItem.DBType,artist) | String.IsEqual(Container(30172).ListItem.DBType,album) | String.IsEqual(Container(30172).ListItem.DBType,song) | String.IsEqual(Container(30172).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30182) + Integer.IsEqual(Container(30181).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30182).ListItem.DBType,artist) | String.IsEqual(Container(30182).ListItem.DBType,album) | String.IsEqual(Container(30182).ListItem.DBType,song) | String.IsEqual(Container(30182).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(30192) + Integer.IsEqual(Container(30191).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30192).ListItem.DBType,artist) | String.IsEqual(Container(30192).ListItem.DBType,album) | String.IsEqual(Container(30192).ListItem.DBType,song) | String.IsEqual(Container(30192).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301102) + Integer.IsEqual(Container(301101).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301102).ListItem.DBType,artist) | String.IsEqual(Container(301102).ListItem.DBType,album) | String.IsEqual(Container(301102).ListItem.DBType,song) | String.IsEqual(Container(301102).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301112) + Integer.IsEqual(Container(301111).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301112).ListItem.DBType,artist) | String.IsEqual(Container(301112).ListItem.DBType,album) | String.IsEqual(Container(301112).ListItem.DBType,song) | String.IsEqual(Container(301112).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301122) + Integer.IsEqual(Container(301121).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301122).ListItem.DBType,artist) | String.IsEqual(Container(301122).ListItem.DBType,album) | String.IsEqual(Container(301122).ListItem.DBType,song) | String.IsEqual(Container(301122).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301132) + Integer.IsEqual(Container(301131).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301132).ListItem.DBType,artist) | String.IsEqual(Container(301132).ListItem.DBType,album) | String.IsEqual(Container(301132).ListItem.DBType,song) | String.IsEqual(Container(301132).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301142) + Integer.IsEqual(Container(301141).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301142).ListItem.DBType,artist) | String.IsEqual(Container(301142).ListItem.DBType,album) | String.IsEqual(Container(301142).ListItem.DBType,song) | String.IsEqual(Container(301142).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301152) + Integer.IsEqual(Container(301151).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301152).ListItem.DBType,artist) | String.IsEqual(Container(301152).ListItem.DBType,album) | String.IsEqual(Container(301152).ListItem.DBType,song) | String.IsEqual(Container(301152).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<value condition="Control.IsVisible(301162) + Integer.IsEqual(Container(301161).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301162).ListItem.DBType,artist) | String.IsEqual(Container(301162).ListItem.DBType,album) | String.IsEqual(Container(301162).ListItem.DBType,song) | String.IsEqual(Container(301162).ListItem.DBType,musicvideo)]">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
		<!-- TV Shows -->
		<value condition="Control.IsVisible(30112) + Integer.IsEqual(Container(30111).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30112).ListItem.DBType,tvshow) | String.IsEqual(Container(30112).ListItem.DBType,season) | String.IsEqual(Container(30112).ListItem.DBType,episode) | String.IsEqual(Container(30112).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30122) + Integer.IsEqual(Container(30121).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30122).ListItem.DBType,tvshow) | String.IsEqual(Container(30122).ListItem.DBType,season) | String.IsEqual(Container(30122).ListItem.DBType,episode) | String.IsEqual(Container(30122).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30132) + Integer.IsEqual(Container(30131).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30132).ListItem.DBType,tvshow) | String.IsEqual(Container(30132).ListItem.DBType,season) | String.IsEqual(Container(30132).ListItem.DBType,episode) | String.IsEqual(Container(30132).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30142) + Integer.IsEqual(Container(30141).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30142).ListItem.DBType,tvshow) | String.IsEqual(Container(30142).ListItem.DBType,season) | String.IsEqual(Container(30142).ListItem.DBType,episode) | String.IsEqual(Container(30142).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30152) + Integer.IsEqual(Container(30151).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30152).ListItem.DBType,tvshow) | String.IsEqual(Container(30152).ListItem.DBType,season) | String.IsEqual(Container(30152).ListItem.DBType,episode) | String.IsEqual(Container(30152).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30162) + Integer.IsEqual(Container(30161).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30162).ListItem.DBType,tvshow) | String.IsEqual(Container(30162).ListItem.DBType,season) | String.IsEqual(Container(30162).ListItem.DBType,episode) | String.IsEqual(Container(30162).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30172) + Integer.IsEqual(Container(30171).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30172).ListItem.DBType,tvshow) | String.IsEqual(Container(30172).ListItem.DBType,season) | String.IsEqual(Container(30172).ListItem.DBType,episode) | String.IsEqual(Container(30172).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30182) + Integer.IsEqual(Container(30181).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30182).ListItem.DBType,tvshow) | String.IsEqual(Container(30182).ListItem.DBType,season) | String.IsEqual(Container(30182).ListItem.DBType,episode) | String.IsEqual(Container(30182).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(30192) + Integer.IsEqual(Container(30191).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(30192).ListItem.DBType,tvshow) | String.IsEqual(Container(30192).ListItem.DBType,season) | String.IsEqual(Container(30192).ListItem.DBType,episode) | String.IsEqual(Container(30192).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301102) + Integer.IsEqual(Container(301101).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301102).ListItem.DBType,tvshow) | String.IsEqual(Container(301102).ListItem.DBType,season) | String.IsEqual(Container(301102).ListItem.DBType,episode) | String.IsEqual(Container(301102).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301112) + Integer.IsEqual(Container(301111).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301112).ListItem.DBType,tvshow) | String.IsEqual(Container(301112).ListItem.DBType,season) | String.IsEqual(Container(301112).ListItem.DBType,episode) | String.IsEqual(Container(301112).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301122) + Integer.IsEqual(Container(301121).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301122).ListItem.DBType,tvshow) | String.IsEqual(Container(301122).ListItem.DBType,season) | String.IsEqual(Container(301122).ListItem.DBType,episode) | String.IsEqual(Container(301122).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301132) + Integer.IsEqual(Container(301131).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301132).ListItem.DBType,tvshow) | String.IsEqual(Container(301132).ListItem.DBType,season) | String.IsEqual(Container(301132).ListItem.DBType,episode) | String.IsEqual(Container(301132).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301142) + Integer.IsEqual(Container(301141).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301142).ListItem.DBType,tvshow) | String.IsEqual(Container(301142).ListItem.DBType,season) | String.IsEqual(Container(301142).ListItem.DBType,episode) | String.IsEqual(Container(301142).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301152) + Integer.IsEqual(Container(301151).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301152).ListItem.DBType,tvshow) | String.IsEqual(Container(301152).ListItem.DBType,season) | String.IsEqual(Container(301152).ListItem.DBType,episode) | String.IsEqual(Container(301152).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		<value condition="Control.IsVisible(301162) + Integer.IsEqual(Container(301161).NumItems,0) + !Skin.HasSetting(home.dontshowfanart) + [String.IsEqual(Container(301162).ListItem.DBType,tvshow) | String.IsEqual(Container(301162).ListItem.DBType,season) | String.IsEqual(Container(301162).ListItem.DBType,episode) | String.IsEqual(Container(301162).ListItem.DBType,video)]">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>
		
		<value>$VAR[GlobalFanart_Fallback]</value>
	</variable>
	
	<variable name="GlobalFanart_Fallback">
		<!-- Weather -->
       	<value condition="!String.IsEmpty(Weather.Plugin) + [$EXP[HasWeatherFanartSingle] | $EXP[HasWeatherFanartMulti]] + [String.IsEqual(Container(300).ListItem.Property(widget),weatherdaily) | String.IsEqual(Container(300).ListItem.Property(widget),weatherhourly)] + [!Skin.HasSetting(home.dontshowfanart) | Control.HasFocus(301) | ControlGroup(301).HasFocus]">$VAR[Image_WeatherCurrent]</value>
        
		<!-- System widget -->
        <value condition="String.IsEqual(Container(300).ListItem.Property(widgetType),system) + [!Skin.HasSetting(home.dontshowfanart) | Control.HasFocus(301) | ControlGroup(301).HasFocus]">special://skin/extras/backgrounds/systeminfo.jpg</value>

		<!-- Playlist Background -->
	    <value condition="String.IsEqual(Container(300).ListItem.Property(background),playlistBackground)">$INFO[Container(9988).ListItem.Art(fanart)]</value>
        
        <!-- Custom Widget Background -->
        <value condition="!String.IsEmpty(Container(300).ListItem.Property(Background))">$INFO[Container(300).ListItem.Property(Background)]</value>

        <value condition="!String.IsEmpty(Container(30111).ListItem.EpgEventIcon)">$INFO[Container(30111).ListItem.EpgEventIcon]</value>
       	<value condition="![String.IsEmpty(Skin.String(home.slideshowpath)) | String.IsEqual(Skin.String(home.slideshowpath),none)] + [String.IsEmpty(Container(300).ListItem.Property(widget)) | Container(301).IsUpdating | Skin.HasSetting(home.dontshowfanart)]">$INFO[Skin.String(home.slideshowpath)]</value>
        <value condition="!String.IsEmpty(Weather.Plugin) + [$EXP[HasWeatherFanartSingle] | $EXP[HasWeatherFanartMulti]] + Skin.HasSetting(home.showweatherfanart) + !$EXP[HomeShowHeader] + !Skin.HasSetting(furniture.weather) + !Skin.HasSetting(furniture.weatherleft) + !Skin.HasSetting(home.vertical) + [!Skin.HasSetting(home.vertical.widgets) | Skin.HasSetting(homemenu.netflix)] + [String.IsEmpty(Container(300).ListItem.Property(widget)) | Container(301).IsUpdating]">$VAR[Image_WeatherCurrent]/</value>
        <value condition="!Container(301).IsUpdating + !Skin.HasSetting(home.vertical.widgets) + String.IsEmpty(Skin.String(fanart.fallback))">special://skin/extras/backgrounds/default.jpg</value>
        <value condition="!Container(301).IsUpdating ">$VAR[Image_SimpleBackground]</value>
	</variable>
    
    <variable name="GlobalFanart">
    	<!-- Video Info Dialog -->
        <value condition="$EXP[IsDialogPersonInfo]">special://skin/extras/backgrounds/actor.jpg</value>

		<!-- Weather -->
        <value condition="Window.IsVisible(weather) + [$EXP[HasWeatherFanartSingle] | $EXP[HasWeatherFanartMulti]]">$VAR[Image_WeatherCurrent]</value>
 
		<!-- Extra Fanart -->
        <value condition="[!String.IsEmpty(Control.GetLabel(4399)) + Skin.HasSetting(EnableExtraFanart) + !Skin.HasSetting(global.hidefanart) + [!Skin.HasSetting(disable.background.addons.fanart) | [Skin.HasSetting(disable.background.addons.fanart) + !String.Contains(Control.GetLabel(4399),addons) + ![String.Contains(Control.GetLabel(4399),plugin) | String.Contains(Control.GetLabel(4399),script) | String.Contains(Control.GetLabel(4399),service)]]]] + !String.IsEqual(ListItem.DBType,season) + !Container.Content(seasons)">$INFO[Control.GetLabel(4399)]</value>

		<!-- Multi Widgets -->
		<value condition="Window.IsVisible(home) + [[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [!Skin.HasSetting(home.vertical) + !Skin.HasSetting(home.classicwidgets) + Skin.HasSetting(home.vertical.widgets)]]">$VAR[GlobalFanart_MultiWidgets]</value>

        <!-- Standard Widget -->
        <value condition="Window.IsVisible(home) + !String.IsEmpty(Container(301).ListItem.Art(fanart)) + [!Skin.HasSetting(home.dontshowfanart) | Control.HasFocus(301)] + Control.IsVisible(301)">$INFO[Container(301).ListItem.Art(fanart)]</value>
        <value condition="Window.IsVisible(home) + !String.IsEmpty(Container(301).ListItem.Property(fanart)) + [!Skin.HasSetting(home.dontshowfanart) | Control.HasFocus(301)] + Control.IsVisible(301)">$INFO[Container(301).ListItem.Property(fanart)]</value>

        <value condition="Window.IsVisible(home) + [String.IsEqual(Container(301).ListItem.DBtype,movie) | String.IsEqual(Container(301).ListItem.DBtype,set)] + [!Skin.HasSetting(home.dontshowfanart) | Control.HasFocus(301)] + Control.IsVisible(301)">special://skin/extras/backgrounds/fallbacks/film.jpg</value>
        <value condition="Window.IsVisible(home) + [String.IsEqual(Container(301).ListItem.DBtype,artist) | String.IsEqual(Container(301).ListItem.DBtype,album) | String.IsEqual(Container(301).ListItem.DBtype,song) | String.IsEqual(Container(301).ListItem.DBtype,musicvideo)] + [!Skin.HasSetting(home.dontshowfanart) | Control.HasFocus(301)] + Control.IsVisible(301)">special://skin/extras/backgrounds/fallbacks/music.jpg</value>
        <value condition="Window.IsVisible(home) + [String.IsEqual(Container(301).ListItem.DBtype,tvshow) | String.IsEqual(Container(301).ListItem.DBtype,season) | String.IsEqual(Container(301).ListItem.DBtype,episode) | String.IsEqual(Container(301).ListItem.DBtype,video)] + [!Skin.HasSetting(home.dontshowfanart) | Control.HasFocus(301)] + Control.IsVisible(301)">special://skin/extras/backgrounds/fallbacks/tv.jpg</value>

		<!-- TMDbHelper PVR Artwork -->
        <value condition="Window.IsVisible(home) + String.StartsWith(Container(301).ListItem.FolderPath,pvr://) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart)) + [!Skin.HasSetting(home.dontshowfanart) | Control.HasFocus(301)] Control.IsVisible(301)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
		
        <!-- Fallback -->
		<value condition="Window.IsVisible(home)">$VAR[GlobalFanart_Fallback]</value>

        <!-- Other -->
        <value condition="Window.IsVisible(tvchannels) + !String.IsEmpty(ListItem.EpgEventIcon)">$INFO[ListItem.EpgEventIcon]</value>
        <value condition="Window.IsVisible(tvguide) + !String.IsEmpty(ListItem.EpgEventIcon)">$INFO[ListItem.EpgEventIcon]</value>
        <value condition="!String.IsEmpty(ListItem.Art(fanart))">$INFO[ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(Container(9500).ListItem.Art(fanart))">$INFO[Container(9500).ListItem.Art(fanart)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Fanart_Image))">$INFO[ListItem.Property(Fanart_Image)]</value>
        <value condition="!String.IsEmpty(ListItem.Property(Fanart))">$INFO[ListItem.Property(Fanart)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Fanart))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Fanart)]</value>
        <value condition="!String.IsEmpty(Skin.String(fanart.fallback))">$INFO[Skin.String(fanart.fallback)]</value>
        <value>$VAR[Image_SimpleBackground]</value>
    </variable>

    <include name="Blur_OnLoad_Action">
        <param name="sourceimage" default="Art(fanart)|Property(Fanart_Image)|Property(fanart)||EPGEventIcon||PicturePath" />
        <definition>
            <onload>SetProperty(TMDbHelper.Blur.SourceImage,$PARAM[sourceimage],Home)</onload>
            <onload>SetProperty(TMDbHelper.Blur.Fallback,$VAR[Image_SimpleBackground],Home)</onload>
        </definition>            
    </include>

    <include name="Blur_SimpleBackground_Onload_Action">
	    <onload condition="Skin.HasSetting(TMDbHelper.EnableBlur)">RunScript(plugin.video.themoviedb.helper,blur_image='"$VAR[Image_SimpleBackground]"')</onload>
    </include>
    
    <include name="GlobalVideoWindow">
        <control type="image" description="Background">
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="Background">common/bg.jpg</texture>
        </control>
        <control type="image" description="Background">
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="ff000000">common/white.png</texture>
            <visible>Player.HasVideo + Skin.HasSetting(global.showvideo)</visible>
        </control>
        <control type="videowindow">
            <include>Dimensions_Fullscreen</include>
            <visible>Player.HasVideo + Skin.HasSetting(global.showvideo)</visible>
        </control>
    </include>

    <include name="GlobalVisualisation">
        <control type="group">
            <visible>Player.HasAudio</visible>
            <control type="visualisation">
                <visible>Visualisation.Enabled</visible>
                <description>visualisation</description>
                <include>Dimensions_Fullscreen</include>
            </control>
            <control type="image">

                <!-- AS 3 -->
                <aspectratio>scale</aspectratio>
                <include>Dimensions_Fullscreen</include>
                <include>BackgroundFanartFadetime</include>
                <texture background="true">$VAR[Visualisation_Image]</texture>
                <visible>$EXP[Visualisation_ShowFanart]</visible>
                <animation effect="fade" start="100" end="65" time="0" condition="Visualisation.Enabled">Conditional</animation>
                <animation effect="fade" start="100" end="0" time="500" condition="String.Contains(Window(Visualisation).Property(ArtistSlideshow.Image),black-hd.png)">Conditional</animation>
                <include>Animation.Animate.Slideshow</include>
            </control>
        </control>
    </include>

    <include name="GlobalBackgroundFade">
        <colordiffuse>FanartFade</colordiffuse>
        <animation effect="fade" end="5" start="5" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),5) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="10" start="10" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),10) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="15" start="15" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),15) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="20" start="20" time="0" condition="[String.IsEmpty(Skin.String(BackgroundBrightness)) | Integer.IsEqual(Skin.String(BackgroundBrightness),20)] + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="25" start="25" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),25) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="30" start="30" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),30) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="35" start="35" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),35) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="40" start="40" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),40) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="45" start="45" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),45) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="50" start="50" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),50) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="55" start="55" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),55) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="60" start="60" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),60) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="65" start="65" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),65) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="70" start="70" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightness),70) + ![Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)]">Conditional</animation>
        <animation effect="fade" end="80" start="80" time="0" condition="Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)">Conditional</animation>
    </include>

    <include name="GlobalBackgroundFadeCleanFlix">
        <colordiffuse>FanartFade</colordiffuse>
        <animation effect="fade" end="25" start="25" time="0" condition="true">Conditional</animation>
    </include>

    <include name="GlobalBackgroundFadeBlur">
        <colordiffuse>FanartFade</colordiffuse>
        <animation effect="fade" end="5" start="5" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),5)">Conditional</animation>
        <animation effect="fade" end="0" start="0" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),0) + !String.IsEmpty(Skin.String(BackgroundBrightnessBlur))">Conditional</animation>
        <animation effect="fade" end="10" start="10" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),10)">Conditional</animation>
        <animation effect="fade" end="15" start="15" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),15)">Conditional</animation>
        <animation effect="fade" end="20" start="20" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),20)">Conditional</animation>
        <animation effect="fade" end="25" start="25" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),25)">Conditional</animation>
        <animation effect="fade" end="30" start="30" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),30)">Conditional</animation>
        <animation effect="fade" end="35" start="35" time="0" condition="String.IsEmpty(Skin.String(BackgroundBrightnessBlur)) | Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),35)">Conditional</animation>
        <animation effect="fade" end="40" start="40" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),40)">Conditional</animation>
        <animation effect="fade" end="45" start="45" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),45)">Conditional</animation>
        <animation effect="fade" end="50" start="50" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),50)">Conditional</animation>
        <animation effect="fade" end="55" start="55" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),55)">Conditional</animation>
        <animation effect="fade" end="60" start="60" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),60)">Conditional</animation>
        <animation effect="fade" end="65" start="65" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),65)">Conditional</animation>
        <animation effect="fade" end="70" start="70" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),70)">Conditional</animation>
    </include>

    <include name="BackgroundFanartFadetime">
        <include condition="Integer.IsEqual(Skin.String(Fadetime),600) | String.IsEmpty(Skin.String(Fadetime))">FadetimeDefault</include>
        <include condition="Integer.IsEqual(Skin.String(Fadetime),1800)">FadetimeSlow</include>
        <include condition="Integer.IsEqual(Skin.String(Fadetime),3600)">FadetimeSuperSlow</include>
        <include condition="Integer.IsEqual(Skin.String(Fadetime),400)">FadetimeFast</include>
    </include>

    <include name="FadetimeFast">
        <fadetime>400</fadetime>
    </include>

    <include name="FadetimeDefault">
        <fadetime>BackgroundFanartFadetime</fadetime>
    </include>

    <include name="FadetimeSlow">
        <fadetime>1800</fadetime>
    </include>

    <include name="FadetimeSuperSlow">
        <fadetime>3600</fadetime>
    </include>

    <include name="HiddenVideoWindow">

        <!--Hidden video window to prevent audio errors-->
        <control type="videowindow">
            <include>Dimensions_Fullscreen</include>
        </control>
    </include>

    <include name="TrailerWindow">
        <control type="videowindow">
            <visible>$EXP[TrailerWindowIsActive] + !$EXP[ExtendedNowPlayingIsVisible]</visible>
            <include condition="![$EXP[HomeIsCleanMinimal] + Window.IsVisible(Home)]">DefTrailerVideoWindowSmall</include>
            <include condition="$EXP[HomeIsCleanMinimal] + Window.IsVisible(Home)">DefTrailerVideoWindowFullscreen</include>
        </control>        
        <control type="image" description="Background">
            <animation effect="slide" start="0,0" end="0,-90" time="0" condition="Skin.HasSetting(home.netflix.autoplay.trailer.custom.window.force)">Conditional</animation>
            <animation effect="slide" start="0,0" end="0,-50" time="0" condition="Skin.HasSetting(home.netflix.autoplay.trailer.custom.window) + String.IsEqual(VideoPlayer.VideoAspect,1.85) + !String.IsEmpty(VideoPlayer.VideoAspect)">Conditional</animation>
            <animation effect="slide" start="0,0" end="0,-90" time="0" condition="Skin.HasSetting(home.netflix.autoplay.trailer.custom.window) + !String.IsEqual(VideoPlayer.VideoAspect,1.85) + !String.IsEqual(VideoPlayer.VideoAspect,1.78) + !String.IsEqual(VideoPlayer.VideoAspect,1.66) + !String.IsEqual(VideoPlayer.VideoAspect,1.37) + !String.IsEqual(VideoPlayer.VideoAspect,1.33) + !String.IsEmpty(VideoPlayer.VideoAspect)">Conditional</animation>
            <visible>$EXP[TrailerWindowIsActive] + !$EXP[ExtendedNowPlayingIsVisible] + ![$EXP[HomeIsCleanMinimal] + Window.IsVisible(Home)]</visible>
            <top>0</top>
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="Background">common/trailerwindow.png</texture>
        </control>
    </include>
    
    <include name="GlobalBackground">        
        <include condition="!Skin.HasSetting(global.showvideo) + Skin.HasSetting(background.video.fix.audio.errors)">HiddenVideoWindow</include>
        <include>GlobalVideoWindow</include>
        <include condition="Skin.HasSetting(global.showvisualisation) + Visualisation.Enabled">GlobalVisualisation</include>
        <control type="fadelabel" id="4399">
            <top>-900</top>
            <width>2560</width>
            <height>0</height>
            <scroll>false</scroll>
            <scrollout>false</scrollout>
            <randomize>true</randomize>
            <resetonlabelchange>true</resetonlabelchange>
            <visible>Skin.HasSetting(EnableExtraFanart)</visible>
            <label>$INFO[ListItem.Art(fanart)]</label>
            <label>$INFO[ListItem.Art(fanart1)]</label>
            <label>$INFO[ListItem.Art(fanart2)]</label>
            <label>$INFO[ListItem.Art(fanart3)]</label>
            <label>$INFO[ListItem.Art(fanart4)]</label>
            <label>$INFO[ListItem.Art(fanart5)]</label>
            <label>$INFO[ListItem.Art(fanart6)]</label>
            <label>$INFO[ListItem.Art(fanart7)]</label>
            <label>$INFO[ListItem.Art(fanart8)]</label>
            <label>$INFO[ListItem.Art(fanart9)]</label>
            <label>$INFO[ListItem.Art(fanart10)]</label>
            <label>$INFO[ListItem.Art(fanart11)]</label>
            <label>$INFO[ListItem.Art(fanart12)]</label>
            <label>$INFO[ListItem.Art(fanart13)]</label>
            <label>$INFO[ListItem.Art(fanart14)]</label>
            <label>$INFO[ListItem.Art(fanart15)]</label>
            <label>$INFO[ListItem.Art(fanart16)]</label>
            <label>$INFO[ListItem.Art(fanart17)]</label>
            <label>$INFO[ListItem.Art(fanart18)]</label>
            <label>$INFO[ListItem.Art(fanart19)]</label>
            <label>$INFO[ListItem.Art(fanart20)]</label>
            <label>$INFO[ListItem.Art(artist.fanart1)]</label>
            <label>$INFO[ListItem.Art(artist.fanart2)]</label>
            <label>$INFO[ListItem.Art(artist.fanart3)]</label>
            <label>$INFO[ListItem.Art(artist.fanart4)]</label>
            <label>$INFO[ListItem.Art(artist.fanart5)]</label>
            <label>$INFO[ListItem.Art(artist.fanart6)]</label>
            <label>$INFO[ListItem.Art(artist.fanart7)]</label>
            <label>$INFO[ListItem.Art(artist.fanart8)]</label>
            <label>$INFO[ListItem.Art(artist.fanart9)]</label>
            <label>$INFO[ListItem.Art(artist.fanart10)]</label>
            <label>$INFO[ListItem.Art(artist.fanart11)]</label>
            <label>$INFO[ListItem.Art(artist.fanart12)]</label>
            <label>$INFO[ListItem.Art(artist.fanart13)]</label>
            <label>$INFO[ListItem.Art(artist.fanart14)]</label>
            <label>$INFO[ListItem.Art(artist.fanart15)]</label>
            <label>$INFO[ListItem.Art(artist.fanart16)]</label>
            <label>$INFO[ListItem.Art(artist.fanart17)]</label>
            <label>$INFO[ListItem.Art(artist.fanart18)]</label>
            <label>$INFO[ListItem.Art(artist.fanart19)]</label>
            <label>$INFO[ListItem.Art(artist.fanart20)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart1)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart2)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart3)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart4)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart5)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart6)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart7)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart8)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart9)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart10)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart11)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart12)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart13)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart14)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart15)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart16)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart17)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart18)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart19)]</label>
            <label>$INFO[ListItem.Art(tvshow.fanart20)]</label>
            <pauseatend>HomeTimePerImage</pauseatend>
        </control>
        
        <!-- Visualisation Overlay -->
        <control type="image" description="Background">
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="Background">common/bg.jpg</texture>
            <visible>!$EXP[HomeIsSpotlight] + !$EXP[HomeIsClassic] + !$EXP[HomeIsModern] + [[Player.HasVideo + Skin.HasSetting(global.showvideo)] | [Player.HasAudio + Skin.HasSetting(global.showvisualisation) + !String.IsEmpty(Visualisation.Name)]]</visible>
            <animation effect="fade" start="100" end="75" time="0" condition="true">Conditional</animation>
        </control>

        <!-- Trailer Window Home -->
        <include condition="Skin.HasSetting(home.netflix.autoplay.trailer)">TrailerWindow</include>

        <!-- Global Fanart -->
        <control type="multiimage" description="Fanart">
            <visible>!Skin.HasSetting(TMDbHelper.EnableBlur) | [Window.IsVisible(home) + !Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogMusicInfo.xml) + !Window.IsVisible(DialogAddonInfo.xml) + !Window.IsVisible(DialogPVRInfo.xml) + !Window.IsVisible(1190)]</visible>
            <visible>![Window.IsVisible(Home.xml) + Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(hide.homemenu.netflix.preview) | [Control.IsVisible(510) | Control.IsVisible(520) | Control.IsVisible(521) | Control.IsVisible(522) | Control.IsVisible(523) | Control.IsVisible(524)] + !Skin.HasSetting(hide.views.netflix.preview) + !Skin.HasSetting(TMDbHelper.EnableBlur)] | Window.IsVisible(DialogVideoInfo.xml) | Window.IsVisible(DialogMusicInfo.xml) | Window.IsVisible(DialogAddonInfo.xml) | Window.IsVisible(DialogPVRInfo.xml)</visible>
            <visible>!Skin.HasSetting(global.hidefanart) | Window.IsVisible(home)</visible>
            <visible>!Player.HasMedia | [!Skin.HasSetting(global.showvideo) + Player.HasVideo] | [!Skin.HasSetting(global.showvisualisation) + Player.HasAudio] | [Skin.HasSetting(global.showvisualisation) + String.IsEmpty(Visualisation.Name) + Player.HasAudio]</visible>
            <include condition="![ [$EXP[HomeIsSpotlight] | $EXP[HomeIsClassic] | $EXP[HomeIsModern]] + Window.IsVisible(home)]">GlobalBackgroundFade</include>
            <include>Dimensions_Fullscreen</include>
            <include>Animation.Background.OpenClose</include>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <randomize>true</randomize>
            <aspectratio>scale</aspectratio>
            <imagepath background="true">$VAR[GlobalFanart]</imagepath>
            <include>Animation.Animate.Fanart</include>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>

        <!-- BLUR Global Fanart -->
        <control type="multiimage" description="Fanart">
            <visible>Skin.HasSetting(TMDbHelper.EnableBlur) + [!Window.IsVisible(home) | Window.IsVisible(DialogVideoInfo.xml) | Window.IsVisible(DialogMusicInfo.xml) | Window.IsVisible(DialogAddonInfo.xml) | Window.IsVisible(DialogPVRInfo.xml) | Window.IsVisible(1190)]</visible>
            <visible>!Skin.HasSetting(global.hidefanart) | Window.IsVisible(home)</visible>
            <visible>!Player.HasMedia | [!Skin.HasSetting(global.showvideo) + Player.HasVideo] | [!Skin.HasSetting(global.showvisualisation) + Player.HasAudio] | [Skin.HasSetting(global.showvisualisation) + String.IsEmpty(Visualisation.Name) + Player.HasAudio]</visible>
            <include>GlobalBackgroundFadeBlur</include>
            <include>Dimensions_Fullscreen</include>
            <include>Animation.Background.OpenClose</include>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <randomize>true</randomize>
            <aspectratio>scale</aspectratio>
            <imagepath background="true">$VAR[GlobalFanart_Blur]</imagepath>
            <include>Animation.Animate.Fanart</include>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>

        <!-- Netflix Preview Window -->
        <control type="multiimage" description="Fanart">
        	<visible>!$EXP[IsUpdatingMultiWidgets]</visible>
            <visible>Window.IsVisible(Home.xml) + Skin.HasSetting(homemenu.netflix) + !Skin.HasSetting(homemenu.clean.flix) + !Skin.HasSetting(hide.homemenu.netflix.preview) | [Control.IsVisible(510) | Control.IsVisible(520) | Control.IsVisible(521) | Control.IsVisible(522) | Control.IsVisible(523) | Control.IsVisible(524)] + !Skin.HasSetting(hide.views.netflix.preview) + !Skin.HasSetting(TMDbHelper.EnableBlur)</visible>
            <visible>!Window.IsVisible(DialogVideoInfo.xml) + !Window.IsVisible(DialogMusicInfo.xml) + !Window.IsVisible(DialogAddonInfo.xml) + !Window.IsVisible(DialogPVRInfo.xml) + !Window.IsVisible(1190)</visible>
            <visible>!Player.HasMedia | [!Skin.HasSetting(global.showvideo) + Player.HasVideo] | [!Skin.HasSetting(global.showvisualisation) + Player.HasAudio] | [Skin.HasSetting(global.showvisualisation) + String.IsEmpty(Visualisation.Name) + Player.HasAudio]</visible>
            <visible>!Skin.HasSetting(global.hidefanart) | Window.IsVisible(home)</visible>
            <include>Animation.Background.OpenClose</include>
            <include>Dimensions_Fullscreen</include>
            <animation effect="fade" start="0" end="100" time="350" tween="sine" easing="in" reversible="false">Visible</animation>
            <animation effect="fade" end="0" start="100" time="150">Hidden</animation>
            <animation effect="fade" end="30" start="30" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),30)">Conditional</animation>
            <animation effect="fade" end="40" start="40" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),40)">Conditional</animation>
            <animation effect="fade" end="50" start="50" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),50)">Conditional</animation>
            <animation effect="fade" end="60" start="60" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),60)">Conditional</animation>
            <animation effect="fade" end="70" start="70" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),70)">Conditional</animation>
            <animation effect="fade" end="80" start="80" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),80) | String.IsEmpty(Skin.String(FadeNetflixPreview)) | String.IsEqual(Skin.String(FadeNetflixPreview),default)">Conditional</animation>
            <animation effect="fade" end="90" start="90" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),90)">Conditional</animation>
            <animation effect="fade" end="100" start="100" time="0" condition="Integer.IsEqual(Skin.String(FadeNetflixPreview),100)">Conditional</animation>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <randomize>true</randomize>
	        <aspectratio>scale</aspectratio>
	        <imagepath background="true" diffuse="common/homediffuse510.png">$VAR[GlobalFanart]</imagepath>
            <include>Animation.Animate.Fanart</include>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>

        <!-- Final Overlays -->
        <control type="image" description="FanartOverlay">
            <visible>[!Skin.HasSetting(homemenu.clean.flix) + !$EXP[HomeIsSpotlight] + !$EXP[HomeIsClassic] + !$EXP[HomeIsModern]] | !Window.IsVisible(Home.xml)</visible>
            <include>Dimensions_Fullscreen</include>
            <texture colordiffuse="FloorFade">common/floor.png</texture>
            <include>Animation.AutoTrailer.FadeOut.Background</include>
        </control>
        <control type="image" description="FanartOverlay">
            <visible>Skin.HasSetting(homemenu.clean.flix) + Window.IsVisible(Home.xml)</visible>
            <include>Dimensions_Fullscreen</include>
            <animation type="WindowOpen" reversible="false">
                <effect type="fade" start="66" end="100" time="150"/>
            </animation>
            <animation type="WindowClose" reversible="false">
                <effect type="fade" end="33" start="100" time="300"/>
            </animation>
            <texture colordiffuse="FloorFade">common/floor2.png</texture>
        </control>
    </include>

    <include name="GlobalBackgroundExtended">
        <control type="image" description="Background">
            <include>Dimensions_Fullscreen</include>
            <include condition="!Skin.HasSetting(home.vertical)">Animation.FadeFromHome</include>
            <texture colordiffuse="Background">common/bg.jpg</texture>
        </control>
        <control type="multiimage" description="Fanart">
            <include>GlobalBackgroundFade</include>
            <visible>!Skin.HasSetting(global.hidefanart)</visible>
            <include>Dimensions_Fullscreen</include>
            <include condition="!Skin.HasSetting(home.vertical)">Animation.FadeFromHome</include>
            <include>BackgroundFanartFadetime</include>
            <timeperimage>HomeTimePerImage</timeperimage>
            <include condition="Skin.HasSetting(homemenu.clean.flix)">GlobalBackgroundFadeCleanFlix</include>
            <randomize>true</randomize>
            <aspectratio>scale</aspectratio>
            <imagepath background="true">$VAR[GlobalFanart]</imagepath>
            <include>Animation.Animate.Fanart</include>
        </control>
        <control type="image" description="FanartOverlay">
            <include>Dimensions_Fullscreen</include>
            <include condition="!Skin.HasSetting(home.vertical)">Animation.FadeFromHome</include>
            <texture colordiffuse="FloorFade">common/floor.png</texture>
        </control>
    </include>

    <variable name="ClickToJump">
        <value condition="Control.IsVisible(501)">SetFocus(501)</value>
        <value condition="Control.IsVisible(507)">SetFocus(507)</value>
        <value condition="Control.IsVisible(504)">SetFocus(504)</value>
        <value condition="Control.IsVisible(50)">SetFocus(50)</value>
        <value condition="Control.IsVisible(51)">SetFocus(51)</value>
        <value condition="Control.IsVisible(52)">SetFocus(52)</value>
        <value condition="Control.IsVisible(53)">SetFocus(53)</value>
        <value condition="Control.IsVisible(54)">SetFocus(54)</value>
        <value condition="Control.IsVisible(56)">SetFocus(56)</value>
        <value condition="Control.IsVisible(57)">SetFocus(57)</value>
        <value condition="Control.IsVisible(58)">SetFocus(58)</value>
        <value condition="Control.IsVisible(59)">SetFocus(59)</value>
        <value condition="Control.IsVisible(500)">SetFocus(500)</value>
        <value condition="Control.IsVisible(55)">SetFocus(55)</value>
        <value condition="Control.IsVisible(555)">SetFocus(555)</value>
        <value condition="Control.IsVisible(550)">SetFocus(550)</value>
        <value condition="Control.IsVisible(509)">SetFocus(509)</value>
        <value condition="Control.IsVisible(505)">SetFocus(505)</value>
        <value condition="Control.IsVisible(519)">SetFocus(519)</value>
        <value condition="Control.IsVisible(511)">SetFocus(511)</value>
        <value condition="Control.IsVisible(512)">SetFocus(512)</value>
        <value condition="Control.IsVisible(513)">SetFocus(513)</value>
        <value condition="Control.IsVisible(514)">SetFocus(514)</value>
        <value condition="Control.IsVisible(515)">SetFocus(515)</value>
        <value condition="Control.IsVisible(5161)">SetFocus(5161)</value>
        <value condition="Control.IsVisible(516)">SetFocus(516)</value>
        <value condition="Control.IsVisible(517)">SetFocus(517)</value>
    </variable>

    <include name="buttontextures">
        <param name="color" value="$PARAM[color]" default="Dark4"/>
        <definition>
        <font>Null</font>
        <textcolor>Dark2</textcolor>
        <texturenofocus colordiffuse="$PARAM[color]" border="0">common/boxsquare.png</texturenofocus>
        <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
        <textureradioonfocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradioonfocus>
        <textureradioonnofocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradioonnofocus>
        <textureradioofffocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradioofffocus>
        <textureradiooffnofocus colordiffuse="FFFFFFFF">$PARAM[icon]</textureradiooffnofocus>
        <textureradiooffdisabled colordiffuse="1FFFFFFF">$PARAM[icon]</textureradiooffdisabled>
        <textureradioondisabled colordiffuse="1FFFFFFF">$PARAM[icon]</textureradioondisabled>
        </definition>
    </include>

    <include name="buttontexturesnumpad">
    	<param name="flipx" default="false"/>
    	<definition>
	        <font>Null</font>
	        <textcolor>Black70</textcolor>
	        <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
	        <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
	        <textureradioonfocus flipx="$PARAM[flipx]" colordiffuse="Selected">$PARAM[icon]</textureradioonfocus>
	        <textureradioonnofocus flipx="$PARAM[flipx]" colordiffuse="Black70">$PARAM[icon]</textureradioonnofocus>
	        <textureradioofffocus flipx="$PARAM[flipx]" colordiffuse="Selected">$PARAM[icon]</textureradioofffocus>
	        <textureradiooffnofocus flipx="$PARAM[flipx]" colordiffuse="Black70">$PARAM[icon]</textureradiooffnofocus>
	        <textureradiooffdisabled flipx="$PARAM[flipx]" colordiffuse="disabled">$PARAM[icon]</textureradiooffdisabled>
	        <textureradioondisabled flipx="$PARAM[flipx]" colordiffuse="disabled">$PARAM[icon]</textureradioondisabled>
		</definition>
    </include>

    <include name="buttondimensionskeyboard">
        <param name="keyboardbuttonwidth" default="85"/>
        <param name="keyboardbuttonradioposx" default="20"/>
		<definition>    
	        <width>$PARAM[keyboardbuttonwidth]</width>
	        <height>75</height>
	        <radioposx>$PARAM[keyboardbuttonradioposx]</radioposx>
	        <radioposy>21</radioposy>
	        <radiowidth>48</radiowidth>
	        <radioheight>34</radioheight>
		</definition>
    </include>

    <include name="buttondimensionsnumpad">
    	<param name="height" default="90" />
    	<param name="radioposy" default="29" />
		<definition>
	        <width>96</width>
	        <height>$PARAM[height]</height>
	        <radioposx>22</radioposx>
	        <radioposy>$PARAM[radioposy]</radioposy>
	        <radiowidth>48</radiowidth>
	        <radioheight>34</radioheight>
		</definition>
    </include>

    <include name="buttondimensions">
        <width>134</width>
        <height>88</height>
        <radioposx>42</radioposx>
        <radioposy>18</radioposy>
        <radiowidth>48</radiowidth>
    </include>

    <include name="buttondimensionssquare">
        <width>126</width>
        <height>88</height>
        <radioposx>40</radioposx>
        <radioposy>18</radioposy>
        <radiowidth>48</radiowidth>
    </include>

    <include name="buttondimensionssquareblur">
        <width>76</width>
        <height>88</height>
        <radioposx>14</radioposx>
        <radioposy>18</radioposy>
        <radiowidth>48</radiowidth>
    </include>

    <include name="listdimensions">
        <height>68</height>
        <bottom>33</bottom>
        <itemgap>28</itemgap>
    </include>

    <variable name="HubWindowTitle">
        <value condition="!String.IsEmpty(Container(300).ListItem.Label)">$INFO[Container(300).ListItem.Label]</value>
        <value condition="!String.IsEmpty(Container(301).ListItem.Label)">$INFO[Container(301).ListItem.Label]</value>
    </variable>
    
    <variable name="HubWindowIcon">
        <value condition="!String.IsEmpty(Container(300).ListItem.Icon)">$INFO[Container(300).ListItem.Icon]</value>
        <value condition="!String.IsEmpty(Container(301).ListItem.Icon)">$INFO[Container(301).ListItem.Icon]</value>
    </variable>

    <include name="DialogConfirmButtons">
        <control type="button" id="12">
            <description>Yes</description>
            <width>270</width>
            <label>107</label>
            <font>Button</font>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
        </control>
        <control type="button" id="11">
            <description>Yes</description>
            <width>270</width>
            <label>107</label>
            <font>Button</font>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
        </control>
        <control type="button" id="10">
            <description>No</description>
            <width>270</width>
            <label>106</label>
            <font>Button</font>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
        </control>
    </include>

	<variable name="MusicInfoNavigation_onleft_control_id">
		<value condition="!Control.HasFocus(11100) + !String.IsEmpty(ListItem.Art(discart))">11100</value>
		<value>9008</value>
	</variable>

	<variable name="MusicInfoNavigation_onright_control_id">
		<value condition="!Control.HasFocus(11100) + !String.IsEmpty(ListItem.Art(discart))">11100</value>
		<value condition="Control.IsVisible(9001)">9001</value>
		<value condition="Control.IsVisible(9007)">9007</value>
		<value condition="Control.IsVisible(9030)">9030</value>
		<value condition="Control.IsVisible(9003)">9003</value>
		<value condition="Control.IsVisible(9004)">9004</value>
		<value condition="Control.IsVisible(9005)">9005</value>
		<value condition="Control.IsVisible(9006)">9006</value>
		<value condition="Control.IsVisible(9029)">9029</value>
		<value>9008</value>
	</variable>

    <include name="DialogMusicInfoNavigation">
        <control type="grouplist" id="9000">
            <bottom>144</bottom>
            <left>783</left>
            <right>SidePad</right>
            <include>listdimensions</include>
            <orientation>horizontal</orientation>
            <onleft>SetFocus($VAR[MusicInfoNavigation_onleft_control_id])</onleft>
            <onright>SetFocus($VAR[MusicInfoNavigation_onright_control_id])</onright>
            <ondown>9601</ondown>
            <onup>9601</onup>
            <control type="radiobutton" id="9001">
                <visible>[String.IsEqual(ListItem.DBType,album) | String.IsEqual(ListItem.DBType,song)] + ![ListItem.IsPlaying | [!String.IsEmpty(ListItem.FolderPath) + String.IsEqual(ListItem.FileNameAndPath,Player.Folderpath)]]</visible>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onclick condition="String.IsEmpty(ListItem.DBID)">PlayMedia($INFO[ListItem.FilenameAndPath])</onclick>
                <onclick condition="System.HasAddon(script.playalbum) + String.IsEqual(ListItem.DBType,song) + !String.IsEmpty(ListItem.DBID)">RunScript(script.playalbum,songid=$INFO[ListItem.DBID])</onclick>
                <onclick condition="System.HasAddon(script.playalbum) + String.IsEqual(ListItem.DBType,album) + !String.IsEmpty(ListItem.DBID)">RunScript(script.playalbum,albumid=$INFO[ListItem.DBID])</onclick>
                <onclick condition="!System.HasAddon(script.playalbum) + !String.IsEmpty(ListItem.DBID)">InstallAddon(script.playalbum)</onclick>
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/play.png"/>
                </include>
            </control>
            <control type="radiobutton" id="9201">
                <visible>[String.IsEqual(ListItem.DBType,album) | String.IsEqual(ListItem.DBType,song)] + [ListItem.IsPlaying | [!String.IsEmpty(ListItem.FolderPath) + String.IsEqual(ListItem.FileNameAndPath,Player.Folderpath)]]</visible>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <include>buttondimensionssquare</include>
                <onclick condition="Player.Playing">Pause</onclick>
                <onclick condition="!Player.Playing">Play</onclick>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/pause.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/pause.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradiooffnofocus>
                <selected>Player.Playing</selected>
            </control>

            <!-- Rating Button -->
            <control type="radiobutton" id="9007">
                <visible>!String.IsEqual(ListItem.DBType,artist)</visible>
                <include>OnFocusOnClick</include>
                <include>ClearOnFocusOnClick</include>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onclick>SendClick(7)</onclick>
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/rating.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/rating.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/rating_new.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/rating_new.png</textureradiooffnofocus>
                <selected>String.IsEmpty(ListItem.UserRating)</selected>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
                <visible>!Skin.HasSetting(hidebutton.music.rating)</visible>
            </control>
            
            <!-- Wikipedia Button -->
            <control type="radiobutton" id="9030">
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <include>buttondimensionssquare</include>
                <onclick>RunScript(script.wikipedia,wikipedia=$VAR[Wiki_Label],language=$VAR[LanguageCheck])</onclick>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/wiki.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.music.wiki) + System.AddonIsEnabled(script.wikipedia)</visible>
            </control>

            <!-- Tracklist Button -->
            <control type="radiobutton" id="9003">
                <visible>String.IsEqual(ListItem.DBType,album)</visible>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onclick>SetProperty(musiccontent,1)</onclick>
                <onclick>SetFocus(9009)</onclick>
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/musictracklist.png"/>
                </include>
            </control>

            <!-- Discography Button -->
            <control type="radiobutton" id="9004">
                <visible>String.IsEqual(ListItem.DBType,artist)</visible>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onclick>SetProperty(musiccontent,2)</onclick>
                <onclick>SetFocus(10051)</onclick>
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/set.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.music.sets)</visible>
                <visible>Integer.IsGreater(Container(51).NumItems,0)</visible>
            </control>

            <!-- Youtube Button -->
            <control type="radiobutton" id="9005">
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onfocus>SetProperty(musicyoutube,1)</onfocus>
                <onclick>SetProperty(musiccontent,3)</onclick>
                <onclick>SetFocus(10052)</onclick>
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/youtube.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.music.youtube) + System.AddonIsEnabled(plugin.video.youtube)</visible>
            </control>

            <!-- Fanart Button -->
            <control type="radiobutton" id="9006">
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onclick>SetProperty(musiccontent,4)</onclick>
                <onclick>SetFocus(10053)</onclick>
                <font>Button</font>
                <textcolor>Dark2</textcolor>
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/image.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.music.fanart)</visible>
                <visible>Integer.IsGreater(Container(53).NumItems,0)</visible>
            </control>

            <!-- More Of Artist Button -->
            <control type="radiobutton" id="9029">
                <visible>String.IsEqual(ListItem.DBType,song)</visible>
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <onclick>SetProperty(musiccontent,8)</onclick>
                <onclick>SetFocus(10054)</onclick>
                <font>Button</font>
                <textcolor>Dark2</textcolor>
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/more.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.music.more)</visible>
                <visible>Integer.IsGreater(Container(54).NumItems,1)</visible>
            </control>

            <!-- Setting Button -->
            <control type="radiobutton" id="9008">
                <onfocus>ClearProperty(musiccontent)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/manage.png"/>
                </include>
                <onclick>SetFocus(9400)</onclick>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
            </control>
        </control>
    </include>

	<variable name="VideoInfoNavigation_onleft_control_id">
		<value condition="!Control.HasFocus(11100) + !String.IsEmpty(ListItem.Art(discart))">11100</value>
		<value condition="Control.IsVisible(10019)">10019</value>
		<value condition="Control.IsVisible(10020)">10020</value>
	</variable>

	<variable name="VideoInfoNavigation_onright_control_id">
		<value condition="!Control.HasFocus(11100) + !String.IsEmpty(ListItem.Art(discart))">11100</value>
		<value condition="Control.IsVisible(8)">8</value>
		<value condition="Control.IsVisible(10001)">10001</value>
		<value condition="Control.IsVisible(10002)">10002</value>
		<value condition="Control.IsVisible(10003)">10003</value>
	</variable>

    <include name="DialogVideoInfoNavigation">
        <control type="grouplist" id="9000">
            <bottom>224</bottom>
            <left>570</left>
            <right>81</right>
            <include>listdimensions</include>
            <onleft>SetFocus($VAR[VideoInfoNavigation_onleft_control_id])</onleft>
            <onright>SetFocus($VAR[VideoInfoNavigation_onright_control_id])</onright>
            <ondown>9601</ondown>
            <onup>9601</onup>
            <orientation>horizontal</orientation>
            <control type="radiobutton" id="8">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <include>buttondimensions</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/play.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/play.png</textureradiooffnofocus>
                <selected>ListItem.IsResumable</selected>
                <visible>!ListItem.IsPlaying</visible>
                <visible>!ListItem.IsFolder</visible>
                <visible>!Window.IsVisible(1190)</visible>
            </control>
            
            <control type="radiobutton" id="10001">
                <onfocus>ClearProperty(moviecontent)</onfocus>
		        <onclick condition="!ListItem.IsFolder + !String.IsEmpty(ListItem.FileNameAndPath)">RunScript(plugin.video.themoviedb.helper,close_dialog=1190,playmedia='$ESCINFO[ListItem.FileNameAndPath]')</onclick>
		        <onclick condition="!ListItem.IsFolder + String.IsEmpty(ListItem.FileNameAndPath)">RunScript(plugin.video.themoviedb.helper,close_dialog=1190,playmedia='$ESCINFO[ListItem.FolderPath]')</onclick>
                <include>buttondimensions</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/play.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/play.png</textureradiooffnofocus>
                <selected>ListItem.IsResumable</selected>
                <visible>!ListItem.IsPlaying</visible>
                <visible>!ListItem.IsFolder</visible>
                <visible>Window.IsVisible(1190)</visible>
            </control>

            <control type="radiobutton" id="10002">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onclick condition="Skin.HasSetting(home.netflix.autoplay.trailer) + $EXP[TrailerIsPlaying] + !Skin.HasSetting(trailer.dont.stop.on.unfocus)">Stop</onclick>
                <onclick condition="Skin.HasSetting(home.netflix.autoplay.trailer) + $EXP[TrailerIsPlaying] + !Skin.HasSetting(trailer.dont.stop.on.unfocus)">ClearProperty(TrailerPath,home)</onclick>
                <onclick>SendClick(8)</onclick>
                <include>buttondimensions</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/folder.png"/>
                </include>
                <visible>ListItem.IsFolder</visible>
            </control>

            <control type="radiobutton" id="10003">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <include>buttondimensions</include>
                <onclick condition="Player.Playing">Pause</onclick>
                <onclick condition="!Player.Playing">Play</onclick>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/pause.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/pause.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/continue.png</textureradiooffnofocus>
                <selected>Player.Playing</selected>
                <visible>ListItem.IsPlaying</visible>
            </control>

            <control type="radiobutton" id="10004">
                <visible>String.IsEqual(ListItem.DBType,tvshow) + Integer.IsGreater(ListItem.Property(UnwatchedEpisodes),0) + !String.IsEmpty(ListItem.DBID) + !Skin.HasSetting(HideNextUpEpisodeButton) + !String.IsEmpty(Container(9911).ListItem.FileNameAndPath)</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onclick condition="!Window.IsVisible(1190)">Dialog.Close(all)</onclick>
                <onclick condition="!Window.IsVisible(1190)">PlayMedia($ESCINFO[Container(9911).ListItem.FileNameAndPath])</onclick>
                <onclick condition="Window.IsVisible(1190)">RunScript(plugin.video.themoviedb.helper,close_dialog=1190,playmedia='$ESCINFO[Container(9911).ListItem.FileNameAndPath]')</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/upnext.png"/>
                </include>
            </control>

            <!-- Trailer - ListItem.Trailer | IMDB.Trailer -->
            <control type="radiobutton" id="10005">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onclick condition="Skin.HasSetting(PlayTrailerWindowed)">SetProperty(moviecontent,6)</onclick>
                <onclick condition="Skin.HasSetting(PlayTrailerWindowed)">SetFocus(7011)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/trailer.png"/>
                </include>
                <include>DialogVideoInfo_Trailer_Click_Action</include>
                <visible>!Skin.HasSetting(hidebutton.video.trailer)</visible>
                <visible>[Skin.HasSetting(Use.IMDB.Trailer) + System.AddonIsEnabled(plugin.video.imdb.trailers) + [!String.IsEmpty(Window(home).Property(TMDbHelper.ListItem.imdb_id)) | $EXP[IMDBNumberIsIMDbId]]] | [!Skin.HasSetting(Use.IMDB.Trailer) + !String.IsEmpty(ListItem.Trailer)]</visible>
            </control>

            <!-- Cinema -->
            <control type="radiobutton" id="10006">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <description>Home Theatre</description>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/playcinema.png"/>
                </include>
                <onclick>RunScript(script.preshowexperience,dbtype=$INFO[ListItem.DBType],dbid=$INFO[ListItem.DBID])</onclick>
                <visible>String.IsEqual(ListItem.DBTYPE,movie) | String.IsEqual(ListItem.DBTYPE,episode)</visible>
                <visible>!Skin.HasSetting(hidebutton.video.cinema) + System.AddonIsEnabled(script.preshowexperience)</visible>
            </control>
            <control type="radiobutton" id="7">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <include>OnFocusOnClick</include>
                <include>ClearOnFocusOnClick</include>
                <include>buttondimensions</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/rating.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/rating.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/rating_new.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/rating_new.png</textureradiooffnofocus>
                <selected>String.IsEmpty(ListItem.UserRating)</selected>
                <visible>Control.IsEnabled(7)</visible>
                <visible>!Skin.HasSetting(hidebutton.video.rating)</visible>
            </control>

            <control type="radiobutton" id="10008">
                <visible>String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>ClearProperty(dontslide,home)</onfocus>
                <onclick>SetProperty(dontslide,1,home)</onclick>
                <onclick condition="String.IsEqual(ListItem.DBType,movie)">RunScript(script.wikipedia,wikipedia=$VAR[Wiki_Label],tmdb_type=movie,language=$VAR[LanguageCheck])</onclick>
                <onclick condition="String.IsEqual(ListItem.DBType,tvshow)">RunScript(script.wikipedia,wikipedia=$VAR[Wiki_Label],tmdb_type=tv,language=$VAR[LanguageCheck])</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/wiki.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.video.wiki) + System.AddonIsEnabled(script.wikipedia)</visible>
            </control>

            <!-- Cast -->
            <control type="radiobutton" id="10009">
                <visible>String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,episode)</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onclick>SetProperty(moviecontent,1)</onclick>
                <onclick condition="Skin.HasSetting(extended.info.local.cast)">SetProperty(dontslide,1,home)</onclick>
                <onclick condition="Skin.HasSetting(extended.info.local.cast)">SetFocus(10050)</onclick>
                <onclick condition="!Skin.HasSetting(extended.info.local.cast)">SetFocus(10052)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/cast.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.video.cast)</visible>
            </control>

            <control type="radiobutton" id="10010">
                <visible>String.IsEqual(ListItem.DBType,set)</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onclick>SetProperty(moviecontent,1)</onclick>
                <onclick>SetFocus(10050)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/set.png"/>
                </include>
                <visible>Skin.HasSetting(extended.info.local.collections)</visible>
            </control>

            <!-- Crew -->
            <control type="radiobutton" id="10011">
                <visible>$EXP[ShowTmdbCrew]</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>SetProperty(videocrew,1)</onfocus>
                <onclick>SetProperty(moviecontent,9)</onclick>
                <onclick>SetFocus(10056)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/crew.png"/>
                </include>
            </control>

             <control type="radiobutton" id="10012">
                <visible>$EXP[ShowTmdbSimilar]</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>SetProperty(videosimilar,1)</onfocus>
                <onclick>SetProperty(moviecontent,2)</onclick>
                <onclick>SetFocus(10053)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/similar.png"/>
                </include>
            </control>
            <control type="radiobutton" id="10013">
                <visible>$EXP[ShowTmdbStudio]</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>SetProperty(videostudio,1)</onfocus>
                <onclick>SetProperty(moviecontent,3)</onclick>
                <onclick>SetFocus(10060)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/studio.png"/>
                </include>
            </control>
            <control type="radiobutton" id="10014">
                <visible>$EXP[ShowTmdbDirector]</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>SetProperty(videodirector,1)</onfocus>
                <onclick>SetProperty(moviecontent,7)</onclick>
                <onclick>SetFocus(10062)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/director.png"/>
                </include>
            </control>

            <control type="radiobutton" id="10015">
                <visible>String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>SetProperty(videoyoutube,1)</onfocus>
                <onclick>SetProperty(moviecontent,4)</onclick>
                <onclick>SetFocus(10054)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/youtube.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.video.youtube)</visible>
                <visible>System.AddonIsEnabled(plugin.video.youtube)</visible>
            </control>

           <control type="radiobutton" id="14">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/versions.png"/>
                </include>
                <visible>!String.IsEmpty(ListItem.DBID) + String.IsEqual(ListItem.DBTYPE,movie)</visible>
                <visible>!Skin.HasSetting(hidebutton.video.versions)</visible>
            </control>
            <control type="radiobutton" id="15">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/extras.png"/>
                </include>
                <visible>!String.IsEmpty(ListItem.DBID) + String.IsEqual(ListItem.DBTYPE,movie)</visible>
                <visible>!Skin.HasSetting(hidebutton.video.extras)</visible>
            </control>
            <control type="radiobutton" id="10016">
                <visible>$EXP[ShowTmdbSet]</visible>
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onfocus>SetProperty(videoset,1)</onfocus>
                <onclick>SetProperty(moviecontent,8)</onclick>
                <onclick>SetFocus(10057)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/set.png"/>
                </include>
            </control>
            <control type="radiobutton" id="10017">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <onclick>SetProperty(moviecontent,5)</onclick>
                <onclick>SetFocus(10055)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/image.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.video.fanart)</visible>
            </control>
            <control type="radiobutton" id="10018">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/trakt.png"/>
                </include>
                <onclick condition="!String.IsEmpty(ListItem.Property(tmdb_id))">RunScript(plugin.video.themoviedb.helper,sync_trakt=watchlist,tmdb_id=$INFO[ListItem.Property(tmdb_id)],cache_refresh)</onclick>
                <onclick condition="String.IsEmpty(ListItem.Property(tmdb_id))">RunScript(plugin.video.themoviedb.helper,sync_trakt=watchlist,tmdb_id=$INFO[window(home).property(tmdbhelper.listitem.tmdb_id)],$VAR[DB_type],cache_refresh)</onclick>
                <visible>!Skin.HasSetting(hidebutton.video.trakt) + [!String.IsEmpty(ListItem.Property(tmdb_id)) | !String.IsEmpty(window(home).property(tmdbhelper.listitem.tmdb_id))] + [String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)] + !String.IsEmpty(Window(Home).Property(TMDbHelper.TraktIsAuth))</visible>
            </control>
            <control type="radiobutton" id="10019">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/manage.png"/>
                </include>
                <onclick>SetFocus(9400)</onclick>
                <visible>!Skin.HasSetting(global.kioskmode) + ![String.IsEmpty(ListItem.DBID) | String.StartsWith(ListItem.Path,plugin://)]</visible>
            </control>
            <control type="radiobutton" id="10020">
                <onfocus>ClearProperty(moviecontent)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/settings.png"/>
                </include>
                <visible>!Skin.HasSetting(global.kioskmode) + [String.IsEmpty(ListItem.DBID) | String.StartsWith(ListItem.Path,plugin://)]</visible>
                <onclick>ActivateWindow(1122)</onclick>
            </control>
        </control>
    </include>

    <include name="DialogPersonInfoNavigation">
        <control type="grouplist" id="9000">
            <bottom>224</bottom>
            <left>571</left>
            <right>SidePad</right>
            <include>listdimensions</include>
            <onup>9601</onup>
            <ondown>9601</ondown>
            <orientation>horizontal</orientation>
            <control type="radiobutton" id="11001">
                <onfocus>ClearProperty(actinfo)</onfocus>
                <onfocus>SetProperty(actormovies,1)</onfocus>
                <onclick>SetProperty(actinfo,1)</onclick>
                <onclick>SetFocus(10070)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/trailer.png"/>
                </include>
                <visible>$EXP[ShowTmdbActorMovies]</visible>
            </control>
            <control type="radiobutton" id="11002">
                <onfocus>ClearProperty(actinfo)</onfocus>
                <onfocus>SetProperty(actortvshows,1)</onfocus>
                <onclick>SetProperty(actinfo,2)</onclick>
                <onclick>SetFocus(10071)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/tvshows.png"/>
                </include>
                <visible>$EXP[ShowTmdbActorTvShows]</visible>
            </control>
            <control type="radiobutton" id="11003">
                <onfocus>ClearProperty(actinfo)</onfocus>
                <onfocus>SetProperty(videocrew,1)</onfocus>
                <onclick>SetProperty(actinfo,3)</onclick>
                <onclick>SetFocus(10072)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/crew.png"/>
                </include>
                <visible>$EXP[ShowTmdbActorInCrew]</visible>
            </control>
            <control type="radiobutton" id="11004">
                <onfocus>ClearProperty(actinfo)</onfocus>
                <onfocus>ClearProperty(dontslide,home)</onfocus>
                <onclick>SetProperty(dontslide,1,home)</onclick>
                <onclick>RunScript(script.wikipedia,wikipedia=$VAR[Wiki_Label],language=$VAR[LanguageCheck])</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/wiki.png"/>
                </include>
                <visible>!Skin.HasSetting(hidebutton.person.wiki) + System.AddonIsEnabled(script.wikipedia)</visible>
            </control>
            <control type="radiobutton" id="11005">
                <onfocus>ClearProperty(actinfo)</onfocus>
                <onclick>SetProperty(actinfo,4)</onclick>
                <onclick>SetFocus(10073)</onclick>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/thumb.png"/>
                </include>
                <visible>$EXP[ShowTmdbActorFanart]</visible>
            </control>
            <control type="radiobutton" id="11006">
                <onfocus>ClearProperty(actinfo)</onfocus>
                <include>buttondimensions</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/settings.png"/>
                </include>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
                <onclick>ActivateWindow(1122)</onclick>
            </control>
        </control>
    </include>

    <include name="DialogAddonInfoNavigation">
        <control type="grouplist" id="9000">
            <bottom>224</bottom>
            <left>783</left>
            <right>SidePad</right>
            <include>listdimensions</include>
            <ondown>9601</ondown>
            <onup condition="Control.IsVisible(50)">50</onup>
            <orientation>horizontal</orientation>
            <control type="radiobutton" id="12">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/launch.png"/>
                </include>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
                <visible>Control.IsEnabled(12)</visible>
            </control>
            <control type="radiobutton" id="6">
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/uninstall.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/uninstall.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/install.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/install.png</textureradiooffnofocus>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
                <visible>Control.IsEnabled(6)</visible>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
                <selected>ListItem.Property(addon.isinstalled) | !Window.IsActive(addonbrowser)</selected>
            </control>
            <control type="radiobutton" id="7">
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/disable.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/disable.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/enabled.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/enabled.png</textureradiooffnofocus>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
                <visible>Control.IsEnabled(7)</visible>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
                <selected>!String.StartsWith(Control.GetLabel(7),$LOCALIZE[24022]) | !Window.IsActive(addonbrowser)</selected>
            </control>
            <control type="radiobutton" id="9">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/configure.png"/>
                </include>
                <visible allowhiddenfocus="true">Control.IsEnabled(9)</visible>
            </control>
            <control type="radiobutton" id="8">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/install.png"/>
                </include>
                <visible>Control.IsEnabled(8)</visible>
            </control>
            <control type="radiobutton" id="14">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/update.png"/>
                </include>
                <visible>Control.IsEnabled(14)</visible>
            </control>
            <control type="radiobutton" id="13">
                <include>buttondimensionssquare</include>
                <texturenofocus colordiffuse="Dark4" border="0">common/boxsquare.png</texturenofocus>
                <texturefocus colordiffuse="$VAR[ColorHighlight]" border="0">common/boxsquare.png</texturefocus>
                <textureradioonfocus colordiffuse="FFFFFFFF">buttonsdialogs/autoupdateon.png</textureradioonfocus>
                <textureradioonnofocus colordiffuse="FFFFFFFF">buttonsdialogs/autoupdateon.png</textureradioonnofocus>
                <textureradioofffocus colordiffuse="FFFFFFFF">buttonsdialogs/autoupdate.png</textureradioofffocus>
                <textureradiooffnofocus colordiffuse="FFFFFFFF">buttonsdialogs/autoupdate.png</textureradiooffnofocus>
                <visible>!Skin.HasSetting(global.kioskmode)</visible>
                <visible>Control.IsEnabled(13)</visible>
                <textcolor>Dark4</textcolor>
                <font>Null</font>
            </control>
            <control type="radiobutton" id="10">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/dependency.png"/>
                </include>
                <visible>Control.IsEnabled(10)</visible>
            </control>
        </control>
    </include>

    <include name="DialogPVRInfoNavigation">
        <control type="grouplist" id="9000">
            <bottom>224</bottom>
            <left>783</left>
            <right>SidePad</right>
            <include>listdimensions</include>
            <onup>9601</onup>
            <ondown>9601</ondown>
            <orientation>horizontal</orientation>
            <control type="radiobutton" id="5">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/launch.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="4">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/similar.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="6">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/record2.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="8">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/play_record.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo) | Window.IsVisible(PVRRecordingInfo)</visible>
            </control>
            <control type="radiobutton" id="9">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/timer.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="11">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/ring.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
            <control type="radiobutton" id="666">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/record2.png"/>
                </include>
                <onclick>Action(close)</onclick>
                <onclick>RunScript(plugin.video.iptv.recorder,$ESCINFO[ListItem.ChannelName],$ESCINFO[ListItem.Title],$ESCINFO[ListItem.Date],$ESCINFO[ListItem.Duration],$ESCINFO[ListItem.Plot])</onclick>
                <visible>System.AddonIsEnabled(plugin.video.iptv.recorder)</visible>
            </control>
            <control type="radiobutton" id="667">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/play_record.png"/>
                </include>
                <onclick>Action(close)</onclick>
                <onclick>ActivateWindow(10025,&quot;plugin://plugin.video.iptv.recorder/recordings&quot;,return)</onclick>
                <visible>System.AddonIsEnabled(plugin.video.iptv.recorder)</visible>
            </control>
            <control type="radiobutton" id="10">
                <include>buttondimensionssquare</include>
                <include content="buttontextures">
                    <param name="icon" value="buttonsdialogs/play.png"/>
                </include>
                <visible>Window.IsVisible(PVRGuideInfo)</visible>
            </control>
        </control>
    </include>

    <expression name="ShowTmdbCast">!Skin.HasSetting(extended.info.local.cast) + !Skin.HasSetting(hidebutton.video.cast) + [String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,episode)]</expression>
    <expression name="ShowTmdbDirector">!Skin.HasSetting(hidebutton.video.director) + String.IsEqual(ListItem.DBType,movie) + !String.IsEmpty(Window(home).Property(TMDbHelper.ListItem.Director))</expression>
    <expression name="ShowTmdbCrew">Skin.HasSetting(showbutton.video.crew) + [String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)]</expression>
    <expression name="ShowTmdbStudio">Skin.HasSetting(showbutton.video.studio) + [String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)] + !String.IsEmpty(Window(home).Property(TMDbHelper.ListItem.Studio))</expression>
    <expression name="ShowTmdbSimilar">Skin.HasSetting(showbutton.video.similar) + [String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)]</expression>
    <expression name="ShowTmdbSet">!Skin.HasSetting(hidebutton.video.set) + [[String.IsEqual(ListItem.DBType,movie) + !String.IsEmpty(Window(home).Property(TMDbHelper.ListItem.Set.TMDb_ID))] | [!Skin.HasSetting(extended.info.only.local) + String.IsEqual(ListItem.DBType,set) + !String.IsEmpty(Window(home).Property(TMDbHelper.ListItem.TMDb_ID))]]</expression>
    <expression name="ShowTmdbActorFanart">!Skin.HasSetting(hidebutton.person.fanart)</expression>
    <expression name="ShowTmdbActorMovies">!Skin.HasSetting(hidebutton.person.movies) + Integer.IsGreater(ListItem.Property(numitems.tmdb.movies.cast),0)</expression>
    <expression name="ShowTmdbActorTvShows">!Skin.HasSetting(hidebutton.person.tvshows) + Integer.IsGreater(ListItem.Property(numitems.tmdb.tvshows.cast),0)</expression>
    <expression name="ShowTmdbActorInCrew">Skin.HasSetting(showbutton.person.crew) + [Integer.IsGreater(ListItem.Property(numitems.tmdb.movies.crew),0) | Integer.IsGreater(ListItem.Property(numitems.tmdb.tvshows.crew),0)]</expression>
    
    <include name="DialogVideoInfo_Trailer_Click_Action">
        <onclick condition="Skin.HasSetting(PlayTrailerWindowed) + !Skin.HasSetting(Use.IMDB.Trailer) + !String.IsEmpty(ListItem.Trailer)">PlayMedia($INFO[ListItem.Trailer],1)</onclick>
        <onclick condition="Skin.HasSetting(PlayTrailerWindowed) + Skin.HasSetting(Use.IMDB.Trailer)">PlayMedia($VAR[ContentIMDbTrailer],1)</onclick>
		<onclick condition="!Skin.HasSetting(PlayTrailerWindowed) + !Window.IsVisible(1190) + [Skin.HasSetting(Use.IMDB.Trailer) | !String.IsEmpty(ListItem.Trailer)]">Dialog.Close(movieinformation)</onclick>                
       	<onclick condition="!Skin.HasSetting(PlayTrailerWindowed) + !Window.IsVisible(1190) + !Skin.HasSetting(Use.IMDB.Trailer) + !String.IsEmpty(ListItem.Trailer)">SendClick(11)</onclick>
        <onclick condition="!Skin.HasSetting(PlayTrailerWindowed) + !Window.IsVisible(1190) + Skin.HasSetting(Use.IMDB.Trailer)">PlayMedia($VAR[ContentIMDbTrailer])</onclick>                
        <onclick condition="!Skin.HasSetting(PlayTrailerWindowed) + Window.IsVisible(1190) + !Skin.HasSetting(Use.IMDB.Trailer) + !String.IsEmpty(ListItem.Trailer)">RunScript(plugin.video.themoviedb.helper,close_dialog=1190,playmedia='$ESCINFO[ListItem.Trailer]')</onclick>
        <onclick condition="!Skin.HasSetting(PlayTrailerWindowed) + Window.IsVisible(1190) + Skin.HasSetting(Use.IMDB.Trailer)">RunScript(plugin.video.themoviedb.helper,close_dialog=1190,playmedia='$ESCVAR[ContentIMDbTrailer]')</onclick>                
	</include>

    <include name="ExtendedImage">
        <control type="button" id="$PARAM[buttonid]">
            <include>HiddenButton</include>
            <onleft>SetFocus($PARAM[containerid])</onleft>
            <onleft>LEFT</onleft>
            <onleft>SetFocus($PARAM[buttonid])</onleft>
            <onright>SetFocus($PARAM[containerid])</onright>
            <onright>RIGHT</onright>
            <onright>SetFocus($PARAM[buttonid])</onright>
            <ondown>$PARAM[containerid]</ondown>
            <onback>$PARAM[containerid]</onback>
        </control>
        <control type="group">
            <visible>Control.HasFocus($PARAM[buttonid])</visible>
            <animation effect="fade" end="100" start="20" time="200" delay="200" easing="out">Visible</animation>
            <animation effect="fade" end="0" start="100" time="200" easing="out">Hidden</animation>
            <control type="image">
                <left>0</left>
                <top>0</top>
                <width>1920</width>
                <height>1080</height>
                <texture>common/black.png</texture>
            </control>
            <control type="image">
                <height>1080</height>
                <fadetime>ImageViewerFadetime</fadetime>
                <aspectratio align="center">keep</aspectratio>
                <texture background="true">$INFO[Container($PARAM[containerid]).ListItem.Art(thumb)]</texture>
            </control>
        </control>
    </include>

    <include name="OnFocusOnClick">
        <onclick>SetProperty(SetUserRating,mixed,home)</onclick>
        <onfocus>SetProperty(SetUserRating,mixed,home)</onfocus>
    </include>

    <include name="ClearOnFocusOnClick">
        <onunfocus>ClearProperty(SetUserRating,home)</onunfocus>
    </include>

    <include name="DialogCustomSettings">
        <control type="group">
            <visible allowhiddenfocus="true">ControlGroup(9400).HasFocus() + !Window.IsVisible(DialogBusy.xml)</visible>
            <visible>![Window.IsVisible(DialogNumeric.xml) | Window.IsVisible(DialogSelect.xml) | Window.IsVisible(DialogKeyboard.xml)]</visible>
            <animation effect="slide" start="0,0" end="-3000,-3000" time="0" condition="!ControlGroup(9400).HasFocus()">Conditional</animation>
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <control type="image">
                <include>Dimensions_Fullscreen</include>
                <texture border="2">common/black-back.png</texture>
            </control>
            <control type="group">
                <centerleft>50%</centerleft>
                <centertop>50%</centertop>
                <width>468</width>
                <top>200</top>
                <height>370</height>
                <control type="image">
                    <visible>!Integer.IsGreater(Container(9400).NumItems,3)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>340</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,4)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>410</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,5)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>480</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,6)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>550</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,5)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>480</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsEqual(Container(9400).NumItems,6)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>550</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="image">
                    <visible>Integer.IsGreater(Container(9400).NumItems,6)</visible>
                    <left>-8</left>
                    <top>-20</top>
                    <right>10</right>
                    <height>620</height>
                    <colordiffuse>White100</colordiffuse>
                    <texture border="16">common/rounded-shadow8.png</texture>
                </control>
                <control type="group">
                    <left>18</left>
                    <top>0</top>
                    <control type="label">
                        <description>Header Label</description>
                        <left>70</left>
                        <width>1000</width>
                        <posy>0</posy>
                        <include>FontTop</include>
                        <textcolor>Black70</textcolor>
                        <label>16106</label>
                    </control>
                    <include content="Kodi_Logo">
                        <param name="dimensions" value="40"/>
                        <param name="top" value="15"/>
                        <param name="left" value="15"/>
                    </include>

                    <!-- Lines -->
                    <control type="image">
                        <top>70</top>
                        <left>17</left>
                        <width>385</width>
                        <height>1</height>
                        <bottom>10</bottom>
                        <colordiffuse>Black12</colordiffuse>
                        <texture>common/white.png</texture>
                    </control>
                </control>
                <control type="group">
                    <height>350</height>
                    <left>-48</left>
                    <top>-22</top>
                    <control type="image">
                        <description>arrow image</description>
                        <centerleft>50%</centerleft>
                        <posy>-16</posy>
                        <include>arrowdimensions</include>
                        <texture colordiffuse="White70" flipy="true">common/arrow-small.png</texture>
                    </control>
                    <control type="image">
                        <description>arrow image</description>
                        <centerleft>50%</centerleft>
                        <posy>342</posy>
                        <include>arrowdimensions</include>
                        <texture colordiffuse="White70" flipy="false">common/arrow-small.png</texture>
                        <animation effect="slide" end="0,70" time="0" condition="Integer.IsGreater(Container(9400).NumItems,3)">Conditional</animation>
                        <animation effect="slide" end="0,70" time="0" condition="Integer.IsGreater(Container(9400).NumItems,4)">Conditional</animation>
                        <animation effect="slide" end="0,70" time="0" condition="Integer.IsGreater(Container(9400).NumItems,5)">Conditional</animation>
                        <animation effect="slide" end="0,70" time="0" condition="Integer.IsGreater(Container(9400).NumItems,6)">Conditional</animation>
                    </control>
                </control>
                <include content="Def_Gradient_Settings_Image">
                    <param name="controlid" value="9400"/>
                    <param name="left" value="0"/>
                    <param name="top" value="90"/>
                    <param name="width" value="450"/>
                </include>
                <control type="grouplist" id="9400">
                    <top>90</top>
                    <onback>9000</onback>
                    <onleft>9000</onleft>
                    <onright>9000</onright>
                    <usecontrolcoords>true</usecontrolcoords>
                    <itemgap>0</itemgap>
                    <scrolltime>0</scrolltime>
                    <height>490</height>
                    <control type="button" id="92">
                        <include>DefContextButtonGradient</include>
                        <label>184</label>
                        <align>left</align>
                        <onclick>SendClick(6)</onclick>
                    </control>
                    <control type="button" id="93">
                        <include>DefContextButtonGradient</include>
                        <label>31283</label>
                        <align>left</align>
                        <onclick>SendClick(10)</onclick>
                    </control>
                    <control type="button" id="97">
                        <include>DefContextButtonGradient</include>
                        <label>$ADDON[script.metadata.editor 32000]</label>
                        <align>left</align>
                        <onclick>RunScript(script.metadata.editor,dbid=$INFO[ListItem.DBID],type=$INFO[ListItem.DBType])</onclick>
                        <visible>System.AddonIsEnabled(script.metadata.editor)</visible>
                    </control>
                    <control type="button" id="96">
                        <include>DefContextButtonGradient</include>
                        <label>5</label>
                        <align>left</align>
                        <onclick>ActivateWindow(1122)</onclick>
                    </control>
                </control>
            </control>
        </control>
    </include>

    <include name="DialogSelectlabelInclude">
        <control type="label">
            <include>Animation.FadeIn</include>
            <include>Animation.FadeOut</include>
            <right>40</right>
            <font>Tiny</font>
            <height>50</height>
            <bottom>30</bottom>
            <align>right</align>
            <textcolor>Black70</textcolor>
            <label>$VAR[DialogSelectlabel]</label>
        </control>
    </include>

    <variable name="nofocus-shadow10">
        <value>nofocus-shadow36.png</value>
    </variable>

    <variable name="shadow-24">
        <value>shadow-24.png</value>
    </variable>

    <variable name="background_side">
        <value>background_side.png</value>
    </variable>

    <variable name="background_top">
        <value>background_top.png</value>
    </variable>

    <variable name="ColorTheme">
        <value condition="String.StartsWith(Skin.CurrentColourTheme,Light)">light</value>
        <value>dark</value>
    </variable>

    <variable name="ColorBorder">
        <value condition="!Skin.HasSetting(osd.usetheme)">$VAR[OSDPanelWhite30]</value>
        <value>BoxNotification</value>
    </variable>

    <variable name="MoreOfArtistContent">
        <value condition="!String.IsEmpty(ListItem.Artist) + !String.IsEqual(ListItem.Artist,) + !String.IsEqual(ListItem.Artist, )">musicdb://songs/?xsp=%7B%22order%22%3A%7B%22ignorefolders%22%3A0%2C%22method%22%3A%22songs%22%7D%2C%22rules%22%3A%7B%22and%22%3A%5B%7B%22field%22%3A%22artist%22%2C%22operator%22%3A%22contains%22%2C%22value%22%3A%5B%22$INFO[ListItem.Artist]%22%5D%7D%5D%7D%2C%22type%22%3A%22songs%22%7D</value>
    </variable>

    <include name="WidgetSelector">
        <control type="button" id="4988">
            <include>DefWidgetSelectorInfo</include>
            <label>31144</label>
            <enable>false</enable>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu) + String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
        </control>
        <control type="button" id="9101" description="Alt chooser">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31414]$VAR[LabelWidget1]</label>
            <label2>$VAR[LabelWidgetShortcutsName]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,1,Home)</onclick>
            <onclick>SetFocus(9451)</onclick>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
        </control>
        <control type="button" id="9102" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31415]$VAR[LabelWidget2]</label>
            <label2>$VAR[LabelWidgetShortcutsName2]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,2,Home)</onclick>
            <onclick>SetFocus(4197)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.2),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="9103" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31416]$VAR[LabelWidget3]</label>
            <label2>$VAR[LabelWidgetShortcutsName3]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,3,Home)</onclick>
            <onclick>SetFocus(4198)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.3),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="9104" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31417]$VAR[LabelWidget4]</label>
            <label2>$VAR[LabelWidgetShortcutsName4]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,4,Home)</onclick>
            <onclick>SetFocus(4199)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.4),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="9105" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31418]$VAR[LabelWidget5]</label>
            <label2>$VAR[LabelWidgetShortcutsName5]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,5,Home)</onclick>
            <onclick>SetFocus(4590)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.5),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="9106" description="Custom">
            <width>100%</width>
            <height>66</height>
            <label>$LOCALIZE[31477]$VAR[LabelWidget6]</label>
            <label2>$VAR[LabelWidgetShortcutsName6]</label2>
            <texturenofocus colordiffuse="Black12" border="5">common/box.png</texturenofocus>
            <align>left</align>
            <include>DefDialogButtonsGradient</include>
            <onclick>SetProperty(skinshortcuts-Widget,6,Home)</onclick>
            <onclick>SetFocus(11001)</onclick>
            <animation effect="fade" start="100" end="50" time="0" condition="!String.IsEqual(Container(211).ListItem.Property(widgetEnable.6),yes)">Conditional</animation>
            <visible>String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu)</visible>
            <visible>[Skin.HasSetting(home.vertical) + Skin.HasSetting(home.vertical.widgets)] | [Skin.HasSetting(home.modernwidgets)  + Skin.HasSetting(home.vertical.widgets)]</visible>
        </control>
        <control type="button" id="4989">
            <include>DefWidgetSelectorInfo</include>
            <label>33063</label>
            <enable>false</enable>
            <visible>String.IsEqual(Window.Property(groupname),mainmenu) + String.IsEmpty(Window(Home).Property(skinshortcuts-Widget))</visible>
        </control>
    </include>

    <include name="fadevertical">
        <animation effect="fade" start="100" end="50" time="400" condition="Control.HasFocus(300) | Control.HasFocus(302)">Conditional</animation>
    </include>

    <include name="fadehorizontal">
        <animation effect="fade" start="100" end="70" time="400" condition="Control.HasFocus(300) | Control.HasFocus(302)">Conditional</animation>
    </include>

    <include name="defaultcontroltrue">
        <defaultcontrol always="true">300</defaultcontrol>
    </include>

    <include name="defaultcontrolfalse">
        <defaultcontrol always="false">300</defaultcontrol>
    </include>

    <include name="ProgressBar">
        <control type="ranges">
            <visible>Skin.HasSetting(cutlist.markers)</visible>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <texturebg colordiffuse="OSDProgressBarColor">osd/progress-bg.png</texturebg>
            <lefttexture colordiffuse="FFFF0000">osd/progress-end.png</lefttexture>
            <midtexture colordiffuse="FFFF0000">osd/progress-end.png</midtexture>
            <righttexture colordiffuse="FFFF0000">osd/progress-end.png</righttexture>
            <info>Player.EditList</info>
        </control>
        <control type="progress" description="cache">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <info>Player.ProgressCache</info>
            <texturebg colordiffuse="OSDProgressBarColor">osd/progress-bg.png</texturebg>
            <lefttexture colordiffuse="Highlight2">osd/progress-end.png</lefttexture>
            <midtexture colordiffuse="Highlight2">osd/progress-end.png</midtexture>
            <righttexture colordiffuse="Highlight2">osd/progress-end.png</righttexture>
            <visible>!Pvr.IsPlayingTv</visible>
        </control>
        <control type="progress" id="23">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <info>Player.Progress</info>
            <visible>!Player.Seeking</visible>
            <visible>!Pvr.IsPlayingTv</visible>
        </control>
        <control type="progress" id="401">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <visible>Player.Seeking</visible>
        </control>
        <control type="progress" id="404">
            <left>0</left>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <info>PVR.EpgEventProgress</info>
            <visible>Pvr.IsPlayingTv</visible>
        </control>
        <control type="ranges">
            <visible>Skin.HasSetting(chapter.markers)</visible>
            <left>0</left>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <texturebg border="3" colordiffuse="00FFFFFF">osd/ch.png</texturebg>
            <righttexture>osd/ch.png</righttexture>
            <info>Player.Chapters</info>
        </control>
    </include>
    
    <include name="ProgressBarInfo">
        <control type="ranges">
            <visible>Skin.HasSetting(cutlist.markers)</visible>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <texturebg colordiffuse="OSDProgressBarColor">osd/progress-bg.png</texturebg>
            <lefttexture colordiffuse="FFFF0000">osd/progress-end.png</lefttexture>
            <midtexture colordiffuse="FFFF0000">osd/progress-end.png</midtexture>
            <righttexture colordiffuse="FFFF0000">osd/progress-end.png</righttexture>
            <info>Player.EditList</info>
        </control>
        <control type="progress">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <info>Player.ProgressCache</info>
            <texturebg colordiffuse="OSDProgressBarColor">osd/progress-bg.png</texturebg>
            <lefttexture colordiffuse="Highlight2">osd/progress-end.png</lefttexture>
            <midtexture colordiffuse="Highlight2">osd/progress-end.png</midtexture>
            <righttexture colordiffuse="Highlight2">osd/progress-end.png</righttexture>
            <visible>!Pvr.IsPlayingTv</visible>
        </control>
        <control type="progress">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <info>Player.Progress</info>
            <visible>!Player.Seeking</visible>
            <visible>!Pvr.IsPlayingTv</visible>
        </control>
        <control type="progress">
            <description>Progress Bar</description>
            <width>100%</width>
            <bottom>10</bottom>
            <height>8</height>
            <visible>Player.Seeking</visible>
        </control>
        <control type="progress">
            <left>0</left>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <info>PVR.EpgEventProgress</info>
            <visible>Pvr.IsPlayingTv</visible>
        </control>
        <control type="ranges">
            <visible>Skin.HasSetting(chapter.markers)</visible>
            <left>0</left>
            <bottom>10</bottom>
            <width>100%</width>
            <height>8</height>
            <texturebg border="3" colordiffuse="00FFFFFF">osd/ch.png</texturebg>
            <righttexture>osd/ch.png</righttexture>
            <info>Player.Chapters</info>
        </control>
    </include>

    <variable name="SetTMDBHelperWidgetContainer">
        <value condition="Control.IsVisible(30111)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30111),00:00,silent)</value>
        <value condition="Control.IsVisible(30121)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30121),00:00,silent)</value>
        <value condition="Control.IsVisible(30131)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30131),00:00,silent)</value>
        <value condition="Control.IsVisible(30141)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30141),00:00,silent)</value>
        <value condition="Control.IsVisible(30151)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30151),00:00,silent)</value>
        <value condition="Control.IsVisible(30161)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30161),00:00,silent)</value>
        <value condition="Control.IsVisible(30171)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30171),00:00,silent)</value>
        <value condition="Control.IsVisible(30181)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30181),00:00,silent)</value>
        <value condition="Control.IsVisible(30191)">AlarmClock(Preload,SetProperty(TMDbHelper.WidgetContainer,30191),00:00,silent)</value>
    </variable>

    <include name="unlock_views">
        <onclick condition="[Container.Content() + !String.IsEmpty(Skin.String(Skin.ForcedView.))]">Skin.Reset(Skin.ForcedView.)</onclick>
        <onclick condition="[Container.Content(tags) + !String.IsEmpty(Skin.String(Skin.ForcedView.tags))]">Skin.Reset(Skin.ForcedView.tags)</onclick>
        <onclick condition="[Container.Content(years) + !String.IsEmpty(Skin.String(Skin.ForcedView.years))]">Skin.Reset(Skin.ForcedView.years)</onclick>
        <onclick condition="[Container.Content(genres) + !String.IsEmpty(Skin.String(Skin.ForcedView.genres))]">Skin.Reset(Skin.ForcedView.genres)</onclick>
        <onclick condition="[Container.Content(countries) + !String.IsEmpty(Skin.String(Skin.ForcedView.countries))]">Skin.Reset(Skin.ForcedView.countries)</onclick>
        <onclick condition="[Container.Content(studios) + !String.IsEmpty(Skin.String(Skin.ForcedView.studios))]">Skin.Reset(Skin.ForcedView.studios)</onclick>
        <onclick condition="[Container.Content(playlists) + !String.IsEmpty(Skin.String(Skin.ForcedView.playlists))]">Skin.Reset(Skin.ForcedView.playlists)</onclick>
        <onclick condition="[Container.Content(movies) + !String.IsEmpty(Skin.String(Skin.ForcedView.movies))]">Skin.Reset(Skin.ForcedView.movies)</onclick>
        <onclick condition="[Container.Content(sets) + !String.IsEmpty(Skin.String(Skin.ForcedView.sets))]">Skin.Reset(Skin.ForcedView.sets)</onclick>
        <onclick condition="[Container.Content(tvshows) + !String.IsEmpty(Skin.String(Skin.ForcedView.tvshows))]">Skin.Reset(Skin.ForcedView.tvshows)</onclick>
        <onclick condition="[Container.Content(seasons) + !String.IsEmpty(Skin.String(Skin.ForcedView.seasons))]">Skin.Reset(Skin.ForcedView.seasons)</onclick>
        <onclick condition="[Container.Content(episodes) + !String.IsEmpty(Skin.String(Skin.ForcedView.episodes))]">Skin.Reset(Skin.ForcedView.episodes)</onclick>
        <onclick condition="[Container.Content(artists) + !String.IsEmpty(Skin.String(Skin.ForcedView.artists))]">Skin.Reset(Skin.ForcedView.artists)</onclick>
        <onclick condition="[Container.Content(albums) + !String.IsEmpty(Skin.String(Skin.ForcedView.albums))]">Skin.Reset(Skin.ForcedView.albums)</onclick>
        <onclick condition="[Container.Content(songs) + !String.IsEmpty(Skin.String(Skin.ForcedView.songs))]">Skin.Reset(Skin.ForcedView.songs)</onclick>
        <onclick condition="[Container.Content(musicvideos) + !String.IsEmpty(Skin.String(Skin.ForcedView.musicvideos))]">Skin.Reset(Skin.ForcedView.musicvideos)</onclick>
        <onclick condition="[Container.Content(addons) + !String.IsEmpty(Skin.String(Skin.ForcedView.addons))]">Skin.Reset(Skin.ForcedView.addons)</onclick>
        <onclick condition="[Container.Content(actors) + !String.IsEmpty(Skin.String(Skin.ForcedView.actors))]">Skin.Reset(Skin.ForcedView.actors)</onclick>
        <onclick condition="[Container.Content(directors) + !String.IsEmpty(Skin.String(Skin.ForcedView.directors))]">Skin.Reset(Skin.ForcedView.directors)</onclick>
        <onclick condition="[Container.Content(files) + !String.IsEmpty(Skin.String(Skin.ForcedView.files))]">Skin.Reset(Skin.ForcedView.files)</onclick>
        <onclick condition="[Container.Content(mixed) + !String.IsEmpty(Skin.String(Skin.ForcedView.mixed))]">Skin.Reset(Skin.ForcedView.mixed)</onclick>
        <onclick condition="[Container.Content(images) + !String.IsEmpty(Skin.String(Skin.ForcedView.images))]">Skin.Reset(Skin.ForcedView.images)</onclick>
        <onclick condition="[Container.Content(games) + !String.IsEmpty(Skin.String(Skin.ForcedView.games))]">Skin.Reset(Skin.ForcedView.games)</onclick>
        <onclick condition="[Container.Content(unknown) + !String.IsEmpty(Skin.String(Skin.ForcedView.unknown))]">Skin.Reset(Skin.ForcedView.unknown)</onclick>
        <onclick condition="[Container.Content(videos) + !String.IsEmpty(Skin.String(Skin.ForcedView.videos))]">Skin.Reset(Skin.ForcedView.videos)</onclick>
    </include>

    <include name="lock_views">
        <onclick condition="[Container.Content() + String.IsEmpty(Skin.String(Skin.ForcedView.))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(tags) + String.IsEmpty(Skin.String(Skin.ForcedView.tags))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(years) + String.IsEmpty(Skin.String(Skin.ForcedView.years))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(genres) + String.IsEmpty(Skin.String(Skin.ForcedView.genres))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(countries) + String.IsEmpty(Skin.String(Skin.ForcedView.countries))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(studios) + String.IsEmpty(Skin.String(Skin.ForcedView.studios))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(playlists) + String.IsEmpty(Skin.String(Skin.ForcedView.playlists))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(movies) + String.IsEmpty(Skin.String(Skin.ForcedView.movies))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(sets) + String.IsEmpty(Skin.String(Skin.ForcedView.sets))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(tvshows) + String.IsEmpty(Skin.String(Skin.ForcedView.tvshows))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(seasons) + String.IsEmpty(Skin.String(Skin.ForcedView.seasons))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(episodes) + String.IsEmpty(Skin.String(Skin.ForcedView.episodes))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(artists) + String.IsEmpty(Skin.String(Skin.ForcedView.artists))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(albums) + String.IsEmpty(Skin.String(Skin.ForcedView.albums))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(songs) + String.IsEmpty(Skin.String(Skin.ForcedView.songs))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(musicvideos) + String.IsEmpty(Skin.String(Skin.ForcedView.musicvideos))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(addons) + String.IsEmpty(Skin.String(Skin.ForcedView.addons))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(actors) + String.IsEmpty(Skin.String(Skin.ForcedView.actors))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(directors) + String.IsEmpty(Skin.String(Skin.ForcedView.directors))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(files) + String.IsEmpty(Skin.String(Skin.ForcedView.files))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(mixed) + String.IsEmpty(Skin.String(Skin.ForcedView.mixed))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(images) + String.IsEmpty(Skin.String(Skin.ForcedView.images))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(games) + String.IsEmpty(Skin.String(Skin.ForcedView.games))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(unknown) + String.IsEmpty(Skin.String(Skin.ForcedView.unknown))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
        <onclick condition="[Container.Content(videos) + String.IsEmpty(Skin.String(Skin.ForcedView.videos))]">Skin.SetString(Skin.ForcedView.$INFO[Container.Content],$ESCINFO[Container.Viewmode])</onclick>
    </include>

    <include name="forced_view">
        <visible>[Container.Content(games) + [String.IsEqual(Skin.String(Skin.ForcedView.games),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.games))]] | [Container.Content(movies) + [String.IsEqual(Skin.String(Skin.ForcedView.movies),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.movies))]] | [Container.Content(sets) + [String.IsEqual(Skin.String(Skin.ForcedView.sets),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.sets))]] | [Container.Content(tvshows) + [String.IsEqual(Skin.String(Skin.ForcedView.tvshows),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.tvshows))]] | [Container.Content(seasons) + [String.IsEqual(Skin.String(Skin.ForcedView.seasons),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.seasons))]] | [Container.Content(episodes) + [String.IsEqual(Skin.String(Skin.ForcedView.episodes),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.episodes))]] | [Container.Content(actors) + [String.IsEqual(Skin.String(Skin.ForcedView.actors),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.actors))]] | [Container.Content(artists) + [String.IsEqual(Skin.String(Skin.ForcedView.artists),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.artists))]] | [Container.Content(albums) + [String.IsEqual(Skin.String(Skin.ForcedView.albums),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.albums))]] | [Container.Content(songs) + [String.IsEqual(Skin.String(Skin.ForcedView.songs),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.songs))]] | [Container.Content(addons) + [String.IsEqual(Skin.String(Skin.ForcedView.addons),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.addons))]] | [Container.Content(genres) + [String.IsEqual(Skin.String(Skin.ForcedView.genres),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.genres))]] | [Container.Content(images) + [String.IsEqual(Skin.String(Skin.ForcedView.images),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.images))]] | [Container.Content(videos) + [String.IsEqual(Skin.String(Skin.ForcedView.videos),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.videos))]] | [Container.Content() + [String.IsEqual(Skin.String(Skin.ForcedView.),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.))]] | [Container.Content(tags) + [String.IsEqual(Skin.String(Skin.ForcedView.tags),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.tags))]] | [Container.Content(years) + [String.IsEqual(Skin.String(Skin.ForcedView.years),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.years))]] | [Container.Content(countries) + [String.IsEqual(Skin.String(Skin.ForcedView.countries),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.countries))]] | [Container.Content(studios) + [String.IsEqual(Skin.String(Skin.ForcedView.studios),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.studios))]] | [Container.Content(playlists) + [String.IsEqual(Skin.String(Skin.ForcedView.playlists),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.playlists))]] | [Container.Content(musicvideos) + [String.IsEqual(Skin.String(Skin.ForcedView.musicvideos),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.musicvideos))]] | [Container.Content(directors) + [String.IsEqual(Skin.String(Skin.ForcedView.directors),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.directors))]] | [Container.Content(files) + [String.IsEqual(Skin.String(Skin.ForcedView.files),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.files))]] | [Container.Content(mixed) + [String.IsEqual(Skin.String(Skin.ForcedView.mixed),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.mixed))]] | [Container.Content(unknown) + [String.IsEqual(Skin.String(Skin.ForcedView.unknown),$PARAM[string]) | String.IsEmpty(Skin.String(Skin.ForcedView.unknown))]] | [!Container.Content(games) + !Container.Content(movies) + !Container.Content(sets) + !Container.Content(tvshows) + !Container.Content(seasons) + !Container.Content(episodes) + !Container.Content(actors) + !Container.Content(artists) + !Container.Content(albums) + !Container.Content(songs) + !Container.Content(addons) + !Container.Content(genres) + !Container.Content(images) + !Container.Content(videos) + !Container.Content() + !Container.Content(tags) + !Container.Content(years) + !Container.Content(countries) + !Container.Content(studios) + !Container.Content(playlists) + !Container.Content(musicvideos) + !Container.Content(directors) + !Container.Content(files) + !Container.Content(mixed) + !Container.Content(unknown)] | Window.IsVisible(MyPlaylist.xml)</visible>
    </include>

    <include name="DialogForcedArrow">
        <align>center</align>
        <top>20</top>
        <include>arrowdimensions</include>
        <texture colordiffuse="Dark1" flipy="false">common/arrow-small-right.png</texture>
    </include>

    <include name="SetWidgetContainerForTMDB">
        <control type="button">
            <visible>false</visible>
            <onfocus>$VAR[SetTMDBHelperWidgetContainer]</onfocus>
            <onfocus>SetProperty(WindowTitle,$INFO[Container(300).ListItem.Label],home)</onfocus>
        </control>
    </include>

    <include name="SetWidgetContainerPosition">
        <control type="button">
            <visible>false</visible>
            <onfocus>SetProperty(ContainerPosition,$INFO[Container($PARAM[id]).CurrentItem]$INFO[Container($PARAM[id]).NumItems, / ,],home)</onfocus>
        </control>
    </include>

    <include name="SetAutoTrailerControl">
        <control type="button">
            <visible>false</visible>

            <!-- Set Property / Skin String -->
            <onfocus>SetProperty(listitem.trailer,$INFO[ListItem.Trailer],home)</onfocus>

            <!-- Reset / Stop On Unfocus -->
            <onunfocus condition="String.IsEmpty(Window(home).Property(TrailerIsPlayingFullscreen))">ClearProperty(TrailerPath,home)</onunfocus>
            <onunfocus condition="$EXP[TrailerIsPlaying] + !Skin.HasSetting(trailer.dont.stop.on.unfocus) + String.IsEmpty(Window(home).Property(TrailerIsPlayingFullscreen))">Stop</onunfocus>

            <!-- Reset Fullscreen Property -->
            <onunfocus condition="!String.IsEmpty(Window(home).Property(TrailerIsPlayingFullscreen))">ClearProperty(TrailerIsPlayingFullscreen,home)</onunfocus>
        </control>
    </include>

    <include name="OverlayEnableAddons">
        <control type="button" id="9608">
            <include>HiddenButton</include>
            <onfocus>AlarmClock(Busy3,SetFocus(9113),00:00,silent)</onfocus>
            <onfocus>AlarmClock(Busy4,SetFocus(11000),00:01,silent)</onfocus>
        </control>
    </include>

    <include name="includecontent">
        <content target="$PARAM[target]" sortby="$PARAM[sortby]" sortorder="$PARAM[sortorder]" limit="$PARAM[limit]" browse="never">$PARAM[ContentToLoad]</content>
    </include>

    <include name="IntentButton">
        <control type="button">
            <width>1</width>
            <height>1</height>
            <label />
            <enable>false</enable>
        </control>
    </include>

    <include name="Widgets">

        <!-- Widget 1 -->
        <include>skinshortcuts-template-widget-vertical.1</include>

        <!-- Widget 2 -->
        <include>skinshortcuts-template-widget-vertical.2</include>

        <!-- Widget 3 -->
        <include>skinshortcuts-template-widget-vertical.3</include>

        <!-- Widget 4 -->
        <include>skinshortcuts-template-widget-vertical.4</include>

        <!-- Widget 5 -->
        <include>skinshortcuts-template-widget-vertical.5</include>

        <!-- Widget 6 -->
        <include>skinshortcuts-template-widget-vertical.6</include>
    </include>

    <include name="ResetViewtypes">
        <onclick>Skin.Reset(home.classicwidgets)</onclick>
        <onclick>Skin.Reset(home.vertical)</onclick>
        <onclick>Skin.Reset(home.modernwidgets)</onclick>
        <onclick>Skin.Reset(home.vertical.widgets)</onclick>
        <onclick>Skin.Reset(homemenu.netflix)</onclick>
        <onclick>Skin.Reset(homemenu.clean.flix)</onclick>
    </include>

    <variable name="AlbumPath">
        <value condition="ListItem.IsFolder + String.IsEqual(ListItem.DBType,album)">$INFO[ListItem.FolderPath]</value>
    </variable>
    
    <variable name="ActorPath">
        <value condition="ListItem.IsFolder + String.IsEqual(Container(301).ListItem.DBType,actor)">$INFO[Container(301).ListItem.FolderPath]</value>
        <value condition="ListItem.IsFolder + String.IsEqual(ListItem.DBType,actor)">$INFO[ListItem.FolderPath]</value>
    </variable>

    <variable name="AlbumPath301">
        <value condition="Container(301).ListItem.IsFolder + String.IsEqual(Container(301).ListItem.DBType,album)">$INFO[Container(301).ListItem.FolderPath]</value>
    </variable>

    <variable name="DB_type">
        <value condition="String.IsEqual(ListItem.DBType,movie) | ListItem.IsCollection | String.IsEqual(ListItem.DBType,set)">type=movie</value>
        <value condition="String.IsEqual(ListItem.DBType,tvshow) | String.IsEqual(ListItem.DBType,season) | String.IsEqual(ListItem.DBType,episode)">type=tv</value>
    </variable>

    <variable name="CustomBlurImage">
        <value condition="!String.IsEmpty(Window(home).Property(Fanart))">$INFO[Window(home).Property(Fanart)]</value>
        <value>special://skin/extras/backgrounds/fallbacks/film.jpg</value>
    </variable>

    <include name="LabelScroll">
        <scroll>true</scroll>
    </include>

    <include name="Item_Selected">
        <property name="ItemSelected">selected</property>
    </include>

    <variable name="WidgetColorSwitch">
        <value condition="Skin.HasSetting(homemenu.clean.flix)">Dark2</value>
        <value>Dark1</value>
    </variable>

    <variable name="Tmdb_Type">
        <value condition="String.IsEqual(ListItem.DBTYPE,movie) | String.IsEqual(ListItem.DBTYPE,set)">movie</value>
        <value condition="String.IsEqual(ListItem.DBTYPE,tvshow) | String.IsEqual(ListItem.DBTYPE,season) | String.IsEqual(ListItem.DBTYPE,episode)">tv</value>
    </variable>

    <variable name="Tmdb_Query_Params">
        <value>&amp;sort_by=premiered&amp;limit=250&amp;nextpage=false&amp;cacheonly=true</value>
    </variable>
    
    <variable name="Info_Query">
        <value condition="String.IsEqual(ListItem.DBType,movie) + $EXP[IMDBNumberIsIMDbId]">$INFO[ListItem.IMDBNumber,&amp;imdb_id=,]</value>
        <value condition="String.IsEqual(ListItem.DBType,movie) + !String.IsEmpty(Window(home).Property(TMDbHelper.ListItem.imdb_id))">$INFO[Window(home).Property(TMDbHelper.ListItem.imdb_id),&amp;imdb_id=,]</value>
        <value condition="String.IsEqual(ListItem.DBType,movie) | String.IsEqual(ListItem.DBType,tvshow)">$INFO[Window(home).Property(TMDbHelper.ListItem.tmdb_id),&amp;tmdb_id=,]$INFO[ListItem.Title,&amp;query=,]$INFO[ListItem.Year,&amp;year=,]</value>        
        <value condition="String.IsEqual(ListItem.DBType,episode)">$INFO[Window(home).Property(TMDbHelper.ListItem.tvshow.tmdb_id),&amp;tmdb_id=,]$INFO[ListItem.TvShowTitle,&amp;query=,]$INFO[VideoPlayer.Season,&amp;season=,]$INFO[ListItem.Episode,&amp;episode=,]$INFO[ListItem.Year,&amp;episode_year=,]</value>
        <value condition="String.IsEqual(ListItem.DBType,season) | String.StartsWith(ListItem.Label,Season)">$INFO[Window(home).Property(TMDbHelper.ListItem.tvshow.tmdb_id),&amp;tmdb_id=,]$INFO[ListItem.TvShowTitle,&amp;query=,]$INFO[VideoPlayer.Season,&amp;season=,]</value>
        <value condition="!String.IsEmpty(ListItem.Title)">$INFO[ListItem.Title,&amp;query=,]$INFO[ListItem.Year,&amp;year=,]</value>
        <value>$INFO[ListItem.Label,&amp;query=,]</value>
    </variable>

	<!-- TMDb vars taken from https://github.com/jurialmunkey/skin.arctic.fuse.2 -->
	
    <variable name="Studio_Query">
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Network.1.TMDb_ID))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Network.1.TMDb_ID),&amp;type=tv&amp;with_networks=,&amp;with_id=True]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Network.2.TMDb_ID))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Network.2.TMDb_ID),&amp;type=tv&amp;with_networks=,&amp;with_id=True]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Network.3.TMDb_ID))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Network.3.TMDb_ID),&amp;type=tv&amp;with_networks=,&amp;with_id=True]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Studio.1.TMDb_ID))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Studio.1.TMDb_ID),&amp;type=movie&amp;with_companies=,&amp;with_id=True]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Studio.2.TMDb_ID))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Studio.2.TMDb_ID),&amp;type=movie&amp;with_companies=,&amp;with_id=True]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Studio.3.TMDb_ID))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Studio.3.TMDb_ID),&amp;type=movie&amp;with_companies=,&amp;with_id=True]</value>
    </variable>

    <variable name="Director_Query">
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.1.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.1.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.1.job),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.1.TMDb_ID),tmdb_id=,]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.2.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.2.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.2.job),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.2.TMDb_ID),tmdb_id=,]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.3.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.3.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.3.job),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.3.TMDb_ID),tmdb_id=,]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.4.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.4.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.4.job),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.4.TMDb_ID),tmdb_id=,]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.5.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.5.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.5.job),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.5.TMDb_ID),tmdb_id=,]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.6.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.6.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.6.job),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.6.TMDb_ID),tmdb_id=,]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.7.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.7.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.7.job),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.7.TMDb_ID),tmdb_id=,]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.8.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.8.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.8.job),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.8.TMDb_ID),tmdb_id=,]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.9.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Director.9.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Director.9.job),Director)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Director.9.TMDb_ID),tmdb_id=,]</value>
        <value >$INFO[Window(Home).Property(TMDbHelper.ListItem.Director),query=,]</value>
    </variable>

    <variable name="FromCreator_Tmdb_Id">
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Creator.1.TMDb_ID))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Creator.1.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Creator.2.TMDb_ID))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Creator.2.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Creator.3.TMDb_ID))">$INFO[Window(Home).Property(TMDbHelper.ListItem.Creator.3.TMDb_ID)]</value>
    </variable>

    <variable name="FromWriter_Tmdb_Id">
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.1.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.1.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.1.job),Screenplay)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.1.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.2.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.2.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.2.job),Screenplay)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.2.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.3.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.3.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.3.job),Screenplay)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.3.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.4.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.4.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.4.job),Screenplay)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.4.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.5.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.5.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.5.job),Screenplay)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.5.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.6.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.6.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.6.job),Screenplay)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.6.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.7.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.7.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.7.job),Screenplay)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.7.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.8.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.8.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.8.job),Screenplay)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.8.TMDb_ID)]</value>
        <value condition="!String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.9.Name)) + !String.IsEmpty(Window(Home).Property(TMDbHelper.ListItem.Writer.9.job)) + String.IsEqual(Window(Home).Property(TMDbHelper.ListItem.Writer.9.job),Screenplay)">$INFO[Window(Home).Property(TMDbHelper.ListItem.Writer.9.TMDb_ID)]</value>
    </variable>

    <include name="Image_Content_Additional_Fanart">
        <content>$VAR[Image_Content_Additional_Fanart]</content>
    </include>

    <include name="IndicatorMoviesCleanHome">
        <control type="grouplist">
            <orientation>horizontal</orientation>
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>  •  </label>
                <visible>Container($PARAM[id]).ListItem.IsPlaying | Container($PARAM[id]).ListItem.IsResumable |
                [
                    [
                        String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayWatched.png)
                        | String.IsEmpty(Container($PARAM[id]).ListItem.Overlay) + !String.IsEmpty(Container($PARAM[id]).ListItem.DBID) + !Integer.IsEqual(Container($PARAM[id]).ListItem.PlayCount,0)
                    ] + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.watched)
                ] |
                [
                    [
                        String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayUnwatched.png)
                        | String.IsEmpty(Container($PARAM[id]).ListItem.Overlay) + !String.IsEmpty(Container($PARAM[id]).ListItem.DBID) + Integer.IsEqual(Container($PARAM[id]).ListItem.PlayCount,0)
                    ] + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.newcontent) +
                    [
                        [
                            String.IsEqual(Window(Home).Property(LatestMovie.1.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.3.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.5.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.7.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.9.Title),Container($PARAM[id]).ListItem.Label)
                            | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),Container($PARAM[id]).ListItem.Label)
                        ]
                        |
                        [
                            String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                            | String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        ]
                    ]
                ]</visible>
            </control>

            <!-- Resumable -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=Dark2]&#62596;[/COLOR]</label>
                <visible>!Container($PARAM[id]).ListItem.IsPlaying + Container($PARAM[id]).ListItem.IsResumable</visible>
            </control>

            <!-- Watched -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=WatchedProgress]&#62078;[/COLOR]</label>
                <visible>!Container($PARAM[id]).ListItem.IsPlaying + [String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayWatched.png) | String.IsEmpty(Container($PARAM[id]).ListItem.Overlay) + !String.IsEmpty(Container($PARAM[id]).ListItem.DBID) + !Integer.IsEqual(Container($PARAM[id]).ListItem.PlayCount,0)] + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.watched)</visible>
            </control>
            
            <!-- Is Playing -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=Dark2]&#62811;[/COLOR]</label>
                <visible>Container($PARAM[id]).ListItem.IsPlaying + !Skin.HasSetting(hide.markers.isplaying)</visible>
            </control>

            <!-- New -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=NewContentProgress]&#62079;[/COLOR]</label>
                <visible>!Container($PARAM[id]).ListItem.IsPlaying + [String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayUnwatched.png) | String.IsEmpty(Container($PARAM[id]).ListItem.Overlay) + !String.IsEmpty(Container($PARAM[id]).ListItem.DBID) + Integer.IsEqual(Container($PARAM[id]).ListItem.PlayCount,0)] + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.newcontent) + [
                    [
                        String.IsEqual(Window(Home).Property(LatestMovie.1.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.2.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.3.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.4.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.5.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.6.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.7.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.8.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.9.Title),Container($PARAM[id]).ListItem.Label)
                        | String.IsEqual(Window(Home).Property(LatestMovie.10.Title),Container($PARAM[id]).ListItem.Label)
                    ]
                    |
                    [
                        String.IsEqual(Window(Home).Property(LatestEpisode.1.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.2.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.3.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.4.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.5.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.6.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.7.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.8.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.9.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.10.EpisodeTitle),Container($PARAM[id]).ListItem.Title)
                    ]
                ]</visible>
            </control>
        </control>
    </include>

    <include name="IndicatorTvShowsCleanHome">
        <control type="grouplist">
            <orientation>horizontal</orientation>
            <control type="label">
                <include>MultiWidgetsSubLabelDefinition</include>
                <label>  •  </label>
                <visible>Container($PARAM[id]).ListItem.IsResumable |
                [
                    [
	                    String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayWatched.png)
	                    | String.IsEmpty(Container($PARAM[id]).ListItem.Overlay) + !String.IsEmpty(Container($PARAM[id]).ListItem.DBID) + !Integer.IsEqual(Container($PARAM[id]).ListItem.PlayCount,0)
                    ] + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.watched)
                ] |
                [
                    [
	                    String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayUnwatched.png)
	                    | String.IsEmpty(Container($PARAM[id]).ListItem.Overlay) + !String.IsEmpty(Container($PARAM[id]).ListItem.DBID) + Integer.IsEqual(Container($PARAM[id]).ListItem.PlayCount,0)
	                ] + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.newcontent) +
                    [
                        String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                        | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    ]
                ]</visible>
            </control>

            <!-- Resumable -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=Dark2]&#62596;[/COLOR]</label>
                <visible>Container($PARAM[id]).ListItem.IsResumable</visible>
            </control>

            <!-- Watched -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=WatchedProgress]&#62078;[/COLOR]</label>
                <visible>[String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayWatched.png) | String.IsEmpty(Container($PARAM[id]).ListItem.Overlay) + !String.IsEmpty(Container($PARAM[id]).ListItem.DBID) + !Integer.IsEqual(Container($PARAM[id]).ListItem.PlayCount,0)] + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.watched)</visible>
            </control>

            <!-- New -->
            <control type="label">
                <include>Def_Watched_Indicators_Clean</include>
                <label>[COLOR=NewContentProgress]&#62079;[/COLOR]</label>
                <visible>[String.IsEqual(Container($PARAM[id]).ListItem.Overlay,OverlayUnwatched.png) | String.IsEmpty(Container($PARAM[id]).ListItem.Overlay) + !String.IsEmpty(Container($PARAM[id]).ListItem.DBID) + Integer.IsEqual(Container($PARAM[id]).ListItem.PlayCount,0)] + !Container($PARAM[id]).ListItem.IsResumable + !Skin.HasSetting(hide.markers.newcontent) +
                [
                    String.IsEqual(Window(Home).Property(LatestEpisode.1.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.2.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.3.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.4.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.5.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.6.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.7.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.8.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.9.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                    | String.IsEqual(Window(Home).Property(LatestEpisode.10.ShowTitle),Container($PARAM[id]).ListItem.TvShowTitle)
                ]</visible>
            </control>
        </control>
    </include>

    <variable name="SetsPath">
        <value condition="ListItem.IsCollection + !String.IsEmpty(ListItem.DBID)">videodb://movies/sets/$INFO[ListItem.DBID]/?setid=$INFO[ListItem.DBID]</value>
    </variable>

    <include name="ButtonPlaylist">
        <control type="button" id="6148">
            <description>Music playlist</description>
            <label>13350</label>
            <include>DefContextButtonGradient</include>
            <align>left</align>
            <onclick>ActivateWindow(musicplaylist)</onclick>
            <visible>!String.IsEqual(Playlist.Length(music),0) + Window.IsVisible(MyMusicNav.xml)</visible>
        </control>
        <control type="button" id="6149">
            <description>Video playlist</description>
            <label>13350</label>
            <include>DefContextButtonGradient</include>
            <align>left</align>
            <onclick>ActivateWindow(videoplaylist)</onclick>
            <visible>!String.IsEqual(Playlist.Length(video),0) + Window.IsVisible(MyVideoNav.xml)</visible>
        </control>
    </include>

    <include name="ControlButtons">
        <control type="grouplist" id="6150">
            <visible>Player.HasMedia | Player.Playing</visible>
            <usecontrolcoords>true</usecontrolcoords>
            <top>10</top>
            <height>60</height>
            <width>450</width>
            <align>center</align>
            <itemgap>10</itemgap>
            <include>ScrolltimeViewsList</include>
            <orientation>horizontal</orientation>
            <onup>20</onup>
            <ondown>9000</ondown>
            <onleft>6150</onleft>
            <onright>6150</onright>
            <onback>50</onback>
            <control type="button" id="6151">
                <texturefocus colordiffuse="$VAR[ColorHighlight]" flipx="true">osd/next.png</texturefocus>
                <texturenofocus colordiffuse="Black70" flipx="true">osd/next.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Previous)</onclick>
            </control>
            <control type="button" id="6152">
                <texturefocus colordiffuse="$VAR[ColorHighlight]" flipx="true">osd/ff.png</texturefocus>
                <texturenofocus colordiffuse="Black70" flipx="true">osd/ff.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Rewind)</onclick>
                <enable>Player.SeekEnabled</enable>
                <animation effect="fade" start="100" end="33" time="100" condition="!Player.SeekEnabled">Conditional</animation>
            </control>
            <control type="togglebutton" id="6153">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/pause.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/pause.png</texturenofocus>
                <alttexturefocus colordiffuse="$VAR[ColorHighlight]">osd/play.png</alttexturefocus>
                <alttexturenofocus colordiffuse="Black70">osd/play.png</alttexturenofocus>
                <width>48</width>
                <height>48</height>
                <usealttexture>Player.Paused | Player.Forwarding | Player.Rewinding</usealttexture>
                <onclick>PlayerControl(Play)</onclick>
                <enable>Player.PauseEnabled</enable>
                <animation effect="fade" start="100" end="33" time="100" condition="!Player.PauseEnabled">Conditional</animation>
            </control>
            <control type="button" id="6154">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/stop.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/stop.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Stop)</onclick>
            </control>
            <control type="button" id="6155">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/ff.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/ff.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Forward)</onclick>
                <enable>Player.SeekEnabled</enable>
                <animation effect="fade" start="100" end="33" time="100" condition="!Player.SeekEnabled">Conditional</animation>
            </control>
            <control type="button" id="6156">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/next.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/next.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick>PlayerControl(Next)</onclick>
            </control>
            <control type="button" id="6157">
                <texturefocus colordiffuse="$VAR[ColorHighlight]">osd/fullscreen.png</texturefocus>
                <texturenofocus colordiffuse="Black70">osd/fullscreen.png</texturenofocus>
                <width>48</width>
                <height>48</height>
                <onclick condition="Player.HasVideo">ActivateWindow(fullscreenvideo)</onclick>
                <onclick condition="Player.HasAudio">ActivateWindow(visualisation)</onclick>
            </control>
        </control>
    </include>

    <include name="Container_NumItems">
        <param name="id" value="$PARAM[id]" default="10055"/>
        <param name="visible" value="$PARAM[visible]" default="false"/>
        <definition>
        <control type="group">
            <include>Animation.DelayFadeIn1200</include>
            <visible>$PARAM[visible]</visible>
            <control type="label">
                <align>right</align>
                <right>125</right>
                <bottom>80</bottom>
                <font>Small</font>
                <height>34</height>
                <width>200</width>
                <textcolor>Dark2</textcolor>
                <label>$INFO[Container($PARAM[id]).CurrentItem] / $INFO[Container($PARAM[id]).NumItems]</label>
                <animation effect="slide" start="0,0" end="45,0" time="0" condition="!Integer.IsGreater(Container($PARAM[id]).NumItems,1)">Conditional</animation>
            </control>
            <control type="grouplist">
                <orientation>horizontal</orientation>
                <height>22</height>
                <align>right</align>
                <right>SidePad</right>
                <width>100</width>
                <bottom>SidePad</bottom>
                <visible>Integer.IsGreater(Container($PARAM[id]).NumItems,1)</visible>
                <control type="image">
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2" flipx="true">common/arrow-small-right.png</texture>
                </control>
                <control type="image">
                    <include>arrowdimensions</include>
                    <texture colordiffuse="Dark2">common/arrow-small-right.png</texture>
                </control>
            </control>
        </control>
        </definition>
    </include>

    <include name="weatherlayoutwidgetsvertical.poster">
        <include>def_weatherposter</include>
    </include>

    <include name="weatherlayoutwidgetsvertical.square">
        <include>def_weathersquare</include>
    </include>

    <include name="weatherlayoutwidgetsvertical.fanart">
        <include>def_weatherfanart</include>
    </include>

    <include name="weatherlayoutwidgetsvertical.poster.focus">
        <definition>
        <control type="group">
            <include>def_weatherposter</include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="weatherlayoutwidgetsvertical.square.focus">
        <definition>
        <control type="group">
            <include>def_weathersquare</include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="weatherlayoutwidgetsvertical.fanart.focus">
        <definition>
        <control type="group">
            <include>def_weatherfanart</include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.poster">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="height_reflection" value="$PARAM[height_reflection]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetposter">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.season">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="height_reflection" value="$PARAM[height_reflection]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetseason">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>212</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImageOnly]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>212</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[SeasonImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.square">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="height_reflection" value="$PARAM[height_reflection]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetsquare">
                <param name="aspectratio" value="$PARAM[aspectratio]"/>
                <param name="distance" value="$PARAM[distance]"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>$PARAM[distance]</left>
                <top>$PARAM[distance]</top>
                <right>$PARAM[distance]</right>
                <bottom>$PARAM[distance]</bottom>
                <aspectratio scalediffuse="false">$PARAM[aspectratio]</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.square.system">
        <include>def_widgetsquare_system</include>
    </include>

    <include name="include.widget.fanart">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="small" value="$PARAM[smallfanart]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetfanart">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="small" value="$PARAM[small]" default="false"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[WidgetFanartImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.landscape">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetlandscape">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="clearlogo" value="$PARAM[clearlogo]" />
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[FanartImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.banner">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetbanner">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>305</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[BannerImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.thumb">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="small" value="$PARAM[smallthumb]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetthumb">
                <param name="clearlogo" value="$PARAM[clearlogo]"/>
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="small" value="$PARAM[small]" />
                <param name="poster" value="$PARAM[poster]" />
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[WidgetThumbnailImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.poster.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetposter">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.season.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>212</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImageOnly]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>212</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[SeasonImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetseason">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="visible_title_overlay" value="$PARAM[visible_title_overlay]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.square.focus">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="height_reflection" value="$PARAM[height_reflection]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <definition>
        <control type="group">
            <height>$PARAM[height_reflection]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>$PARAM[distance]</left>
                <top>$PARAM[distance]</top>
                <right>$PARAM[distance]</right>
                <bottom>$PARAM[distance]</bottom>
                <aspectratio scalediffuse="false">$PARAM[aspectratio]</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[PosterImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetsquare">
                <param name="aspectratio" value="$PARAM[aspectratio]"/>
                <param name="distance" value="$PARAM[distance]"/>
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.square.system.focus">
        <control type="group">
            <include>def_widgetsquare_system</include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
    </include>

    <include name="include.widget.fanart.focus">
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="small" value="$PARAM[smallfanart]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[WidgetFanartImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetfanart">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="small" value="$PARAM[small]" default="false"/>
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.landscape.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[FanartImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetlandscape">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
                <param name="clearlogo" value="$PARAM[clearlogo]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.banner.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetbanner">
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>305</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[BannerImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        </definition>
    </include>

    <include name="include.widget.thumb.focus">
        <param name="height" value="$PARAM[height]" default="325"/>
        <param name="top" value="$PARAM[top]" default="305"/>
        <param name="reflections" value="$PARAM[reflections]" default="false"/>
        <param name="small" value="$PARAM[smallthumb]" default="false"/>
        <definition>
        <control type="group">
            <height>$PARAM[height]</height>
            <top>$PARAM[top]</top>
            <control type="image">
                <left>10</left>
                <top>10</top>
                <right>10</right>
                <bottom>10</bottom>
                <aspectratio scalediffuse="false">scale</aspectratio>
                <texture flipy="true" diffuse="diffuse/listposter-ref-widgets.png" background="true">$VAR[WidgetThumbnailImage]</texture>
                <visible>$PARAM[reflections]</visible>
            </control>
        </control>
        <control type="group">
            <height>$PARAM[height]</height>
            <include content="def_widgetthumb">
                <param name="clearlogo" value="$PARAM[clearlogo]"/>
                <param name="small" value="$PARAM[small]" />
                <param name="poster" value="$PARAM[poster]" />
                <param name="indicatorbackground" value="$PARAM[indicatorbackground]" />
            </include>
            <include content="def_widgetfocus">
                <param name="id" value="$PARAM[id]"/>
            </include>
        </control>
        </definition>
    </include>

    <include name="include.widget.pvr">
        <include>def_widgetpvr</include>
    </include>

    <include name="include.widget.pvr.focus">
        <control type="group">
            <include>def_widgetpvr</include>
            <include content="def_widgetpvrfocus">
                <param name="shortcutsid" value="$PARAM[shortcutsid]" />
            </include>
        </control>
    </include>

    <variable name="PlayListStatsPath">
        <value condition="System.AddonIsEnabled(script.embuary.helper) + String.StartsWith(Container(300).ListItem.Property(path),ActivateWindow) + String.Contains(Container(300).ListItem.Property(path),Videos) + String.Contains(Container(300).ListItem.Property(path),playlists) + String.Contains(Container(300).ListItem.Property(path),.xsp)">plugin://script.embuary.helper/?info=getpathstats&amp;path=$INFO[Container(300).ListItem.Property(path)]&amp;prefix=Playlist</value>
    </variable>

    <variable name="PlaylistsCountItemPath">
        <value condition="String.StartsWith(Container(300).ListItem.Property(path),ActivateWindow) + String.Contains(Container(300).ListItem.Property(path),Videos) + String.Contains(Container(300).ListItem.Property(path),playlists) + !String.Contains(Container(300).ListItem.Property(path),.xsp)">special://videoplaylists/</value>
    </variable>

    <variable name="RandomMovies">
        <value condition="Skin.HasSetting(home.netflix.autoplay.trailer)">special://skin/extras/playlists/Spotlight.xsp</value>
        <value>special://skin/extras/playlists/RandomMovies.xsp</value>
    </variable>
    
    <include name="BusySpinner">
        <param name="color" default="Dark1"/>
        <definition>
        <control type="image">
            <description>Busy animation</description>
            <centerleft>54</centerleft>
            <centertop>54</centertop>
            <width>100</width>
            <height>100</height>
            <texture>dialog/loading-back.png</texture>
            <aspectratio>keep</aspectratio>
        </control>
        <control type="image">
            <description>Busy animation</description>
            <centerleft>54</centerleft>
            <centertop>54</centertop>
            <width>100</width>
            <height>100</height>
            <animation effect="rotate" condition="true" start="360" end="0" loop="true" time="1000" center="auto">Conditional</animation>
            <texture colordiffuse="$VAR[ColorHighlight]">dialog/loading-spinner.png</texture>
            <aspectratio>keep</aspectratio>
        </control>
        <control type="label">
            <description>Busy label</description>
            <posx>105</posx>
            <posy>30</posy>
            <width>720</width>
            <height>48</height>
            <align>left</align>
            <label>$LOCALIZE[31138]...</label>
            <textcolor>$PARAM[color]</textcolor>
        </control>
        </definition>
    </include>
    
    <include name="arrowdimensions">
        <width>16</width>
        <height>16</height>
    </include>
    
    <include name="EffectsPreviewImage">
        <control type="image">
            <texture background="true">$PARAM[texture]</texture>
            <include>BackgroundFanartFadetime</include>
            <animation effect="fade" end="5" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),5)">Conditional</animation>
            <animation effect="fade" end="0" start="100" time="0" condition="!String.IsEmpty(Skin.String(BackgroundBrightnessBlur)) + Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),0)">Conditional</animation>
            <animation effect="fade" end="10" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),10)">Conditional</animation>
            <animation effect="fade" end="15" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),15)">Conditional</animation>
            <animation effect="fade" end="20" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),20)">Conditional</animation>
            <animation effect="fade" end="25" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),25)">Conditional</animation>
            <animation effect="fade" end="30" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),30)">Conditional</animation>
            <animation effect="fade" end="35" start="100" time="0" condition="String.IsEmpty(Skin.String(BackgroundBrightnessBlur)) | Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),35)">Conditional</animation>
            <animation effect="fade" end="40" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),40)">Conditional</animation>
            <animation effect="fade" end="45" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),45)">Conditional</animation>
            <animation effect="fade" end="50" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),50)">Conditional</animation>
            <animation effect="fade" end="55" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),55)">Conditional</animation>
            <animation effect="fade" end="60" start="100" time="0" condition="Integer.IsEqual(Skin.String(BackgroundBrightnessBlur),60)">Conditional</animation>
        </control>
    </include>
    
    <include name="border_texture">
        <param name="colordiffuse" default="BoxWidget"/>
        <definition>
        <bordersize>1</bordersize>
        <bordertexture border="4" colordiffuse="$PARAM[colordiffuse]" infill="false">common/box21.png</bordertexture>
        </definition>
    </include>
    
    <variable name="UpNextEpisodePath">
        <value condition="String.IsEqual(ListItem.DBType,tvshow) + Integer.IsGreater(ListItem.Property(UnwatchedEpisodes),0) + !String.IsEmpty(ListItem.DBID)">videodb://inprogresstvshows/$INFO[ListItem.DBID]/-2/?tvshowid=$INFO[ListItem.DBID]</value>
    </variable>
    
    <include name="PosterDiscCase">
        <param name="discposition" default="5"/>
        <definition>
        <control type="group">
            <left>1568</left>
            <top>548</top>
            <visible>!String.IsEqual(ListItem.Label,..)</visible>
            <control type="image">
                <visible>!String.IsEmpty(ListItem.Art(discart)) + Skin.HasSetting(discartfanart) + !Container.OnNext + !Container.OnPrevious</visible>
                <top>$PARAM[discposition]</top>
                <width>235</width>
                <height>235</height>
                <left>-117</left>
                <fadetime>1000</fadetime>
                <texture>$INFO[ListItem.Art(discart)]</texture>
                <animation type="Visible" reversible="false">
                    <effect type="fade" start="0" end="100" time="0" delay="450"/>
                    <effect type="slide" start="117" end="0" tween="sine" easing="out" time="600" delay="500"/>
                </animation>
                <animation type="Hidden" reversible="false">
                    <effect type="fade" start="100" end="0" time="0"/>
                </animation>
                <animation type="WindowOpen" reversible="false">
                    <effect type="fade" start="0" end="100" time="0" delay="450"/>
                    <effect type="slide" start="117" end="0" tween="sine" easing="out" time="600" delay="500"/>
                </animation>
                <animation type="WindowClose" reversible="false">
                    <effect type="slide" start="0" end="117" tween="sine" easing="out" time="250"/>
                    <effect type="fade" start="100" end="0" time="150"/>
                </animation>
            </control>
            <control type="image">
                <width>242</width>
                <height>342</height>
                <fadetime>PosterFanartFadetime</fadetime>
                <texture background="true">$VAR[PosterImage]</texture>
            </control>
            <control type="image">
                <width>278</width>
                <height>370</height>
                <left>-20</left>
                <top>-9</top>
                <fadetime>PosterFanartFadetime</fadetime>
                <texture>misc/poster_glass2.png</texture>
                <visible>Skin.HasSetting(ModernCase)</visible>
            </control>
            <control type="image">
                <width>244</width>
                <height>345</height>
                <fadetime>PosterFanartFadetime</fadetime>
                <texture>misc/br-case.png</texture>
                <visible>!Skin.HasSetting(ModernCase)</visible>
            </control>
        </control>
        </definition>
    </include>
    
    <variable name="AutoCompletionPath">
        <value condition="System.AddonIsEnabled(plugin.program.autocompletion)">plugin://plugin.program.autocompletion?info=autocomplete&amp;&amp;id=$INFO[Control.GetLabel(312).index(1)]&amp;&amp;limit=9</value>
    </variable>
    
    <variable name="Wiki_Label">
        <value condition="String.IsEqual(ListItem.DBType,album) + !String.IsEmpty(ListItem.Album)">$INFO[ListItem.Album] $INFO[ListItem.Artist]</value>
        <value condition="String.IsEqual(ListItem.DBType,song) + !String.IsEmpty(ListItem.Title)">$INFO[ListItem.Title] $INFO[ListItem.Artist]</value>
        <value condition="String.IsEqual(ListItem.DBType,artist) + !String.IsEmpty(ListItem.Artist)">$INFO[ListItem.Artist]</value>
        <value condition="!String.IsEmpty(ListItem.TVShowTitle)">$INFO[ListItem.TVShowTitle]</value>
        <value condition="!String.IsEmpty(ListItem.Title)">$INFO[ListItem.Title]</value>
        <value>$INFO[ListItem.Label]</value>
    </variable>

    <variable name="CurrentlyPlayingItem">
        <value condition="Player.HasAudio + !String.IsEmpty(MusicPlayer.DBID)">musicdb://songs/?songid=$INFO[MusicPlayer.DBID]</value>
        <value condition="Player.HasVideo + VideoPlayer.Content(movies)">videodb://movies/titles/?xsp=%7B%22rules%22%3A%7B%22and%22%3A%5B%7B%22field%22%3A%22title%22%2C%22operator%22%3A%22is%22%2C%22value%22%3A%5B%22$INFO[Player.Title]%22%5D%7D%2C%7B%22field%22%3A%22filename%22%2C%22operator%22%3A%22is%22%2C%22value%22%3A%5B%22$INFO[Player.Filename]%22%5D%7D%5D%7D%2C%22type%22%3A%22movies%22%7D</value>
        <value condition="Player.HasVideo + VideoPlayer.Content(episodes)">videodb://tvshows/titles/-1/-1/?xsp=%7B%22rules%22%3A%7B%22and%22%3A%5B%7B%22field%22%3A%22title%22%2C%22operator%22%3A%22is%22%2C%22value%22%3A%5B%22$INFO[Player.Title]%22%5D%7D%2C%7B%22field%22%3A%22filename%22%2C%22operator%22%3A%22is%22%2C%22value%22%3A%5B%22$INFO[Player.Filename]%22%5D%7D%5D%7D%2C%22type%22%3A%22episodes%22%7D
        </value>
    </variable>
    
    <include name="OnDirectionAction">
        <onleft>$PARAM[ondirection]</onleft>
        <onright>$PARAM[ondirection]</onright>
        <onup>$PARAM[ondirection]</onup>
        <ondown>$PARAM[ondirection]</ondown>
        <onback>$PARAM[ondirection]</onback>
    </include>
    
    <variable name="LanguageCheck">
        <value condition="String.IsEqual(System.Language,Italian)">it</value>
        <value condition="String.IsEqual(System.Language,German)">de</value>
        <value condition="String.Contains(System.Language,French)">fr</value>
        <value condition="String.Contains(System.Language,Spanish)">es</value>
        <value>en</value>
    </variable>

    <include name="VideoVersionButtons">
        <control type="button" id="21">
            <width>300</width>
            <align>center</align>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <label>$LOCALIZE[208]</label>
            <visible>!Window.IsVisible(1190)</visible>
        </control>
        <control type="button" id="22">
            <width>300</width>
            <align>center</align>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <label>$LOCALIZE[40014]</label>
            <visible>Window.IsVisible(managevideoversions)</visible>
        </control>
        <control type="button" id="23">
            <width>300</width>
            <align>center</align>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <label>$LOCALIZE[40015]</label>
            <visible>Window.IsVisible(managevideoextras)</visible>
        </control>
        <control type="button" id="27">
            <width>300</width>
            <align>center</align>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <label>$LOCALIZE[13511]</label>
        </control>
        <control type="button" id="24">
            <width>300</width>
            <align>center</align>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <label>$LOCALIZE[40004]</label>
            <visible>Window.IsVisible(managevideoversions)</visible>
        </control>
        <control type="button" id="28">
            <width>300</width>
            <align>center</align>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <label>$LOCALIZE[118]</label>
            <visible>Window.IsVisible(managevideoextras)</visible>
        </control>
        <control type="button" id="26">
            <width>300</width>
            <align>center</align>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <label>$LOCALIZE[15015]</label>
        </control>
        <control type="button" id="25">
            <width>300</width>
            <align>center</align>
            <texturefocus colordiffuse="$VAR[ColorHighlight]" border="5">common/box.png</texturefocus>
            <label>$LOCALIZE[40023]</label>
            <visible>Window.IsVisible(managevideoversions)</visible>
        </control>      
    </include>    
</includes>
